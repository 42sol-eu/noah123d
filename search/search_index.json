{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Noah123d","text":"Building assemblies from STL models <p>A comprehensive STL to 3MF converter with advanced grid layout capabilities</p>"},{"location":"#overview","title":"Overview","text":"<p>Noah123d is a powerful Python library and CLI tool for converting STL files to 3MF format with advanced features for 3D printing workflows. It specializes in creating grid layouts, analyzing 3D models, and managing complex assemblies.</p>"},{"location":"#key-features","title":"Key features","text":""},{"location":"#stl-to-3mf-conversion","title":"\ud83d\udd04 STL to 3MF conversion","text":"<p>Convert binary and ASCII STL files to industry-standard 3MF format with high performance and accuracy.</p>"},{"location":"#grid-layout-system","title":"\ud83d\udd32 grid layout system","text":"<p>Automatically arrange multiple copies of objects in optimized grid patterns with intelligent spacing.</p>"},{"location":"#3mf-analysis","title":"\ud83d\udd0d 3MF analysis","text":"<p>Analyze existing 3MF files to extract model information, dimensions, and center of mass calculations.</p>"},{"location":"#high-performance","title":"\u26a1 high performance","text":"<p>Process complex models with 80,000+ triangles/second with efficient memory usage.</p>"},{"location":"#rich-metadata","title":"\ud83d\udcca rich metadata","text":"<p>Generate detailed conversion statistics and model information for quality assurance.</p>"},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install noah123d\n</code></pre>"},{"location":"#basic-usage","title":"Basic usage","text":"Simple ConversionGrid Layout3MF Analysis <pre><code>from noah123d import stl_to_3mf\n\n# Convert single STL to 3MF\nsuccess = stl_to_3mf(\"model.stl\", \"output.3mf\")\n</code></pre> <pre><code>from noah123d import stl_to_3mf_grid\n\n# Create 2x2 grid with 4 copies\nsuccess = stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\",\n    count=4,\n    grid_cols=2,\n    spacing_factor=1.2\n)\n</code></pre> <pre><code>from noah123d import analyze_3mf\n\n# Analyze existing 3MF file\nanalysis = analyze_3mf(\"model.3mf\")\nprint(f\"Objects: {analysis['summary']['object_count']}\")\nprint(f\"Dimensions: {analysis['summary']['overall_dimensions']}\")\n</code></pre>"},{"location":"#use-cases","title":"Use cases","text":""},{"location":"#production-manufacturing","title":"\ud83c\udfed production manufacturing","text":"<p>Create optimized print layouts for batch production with consistent spacing and arrangement.</p>"},{"location":"#prototyping","title":"\ud83d\udd2c prototyping","text":"<p>Quickly generate test arrays with different configurations and spacing options.</p>"},{"location":"#assembly-kits","title":"\ud83d\udce6 assembly kits","text":"<p>Organize multiple components in logical arrangements for packaging and assembly.</p>"},{"location":"#3d-printing-optimization","title":"\ud83d\udd27 3D printing optimization","text":"<p>Maximize print bed utilization with intelligent grid layouts and spacing calculations.</p>"},{"location":"#performance","title":"Performance","text":"<ul> <li>High-speed conversion: 80,000+ triangles/second</li> <li>Memory efficient: Reuses geometry data for multiple copies</li> <li>Scalable: Handles complex models with hundreds of thousands of triangles</li> <li>Reliable: Robust error handling and validation</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>Noah123d is built with a modular architecture:</p> <pre><code>graph TD\n    A[STL Files] --&gt; B[STLConverter]\n    B --&gt; C[Archive3mf]\n    C --&gt; D[Directory]\n    D --&gt; E[Model]\n    E --&gt; F[3MF Output]\n\n    G[3MF Files] --&gt; H[Analysis3MF]\n    H --&gt; I[Model Analysis]\n    I --&gt; J[Statistics &amp; Reports]\n\n    K[Grid System] --&gt; B\n    K --&gt; L[Position Calculator]\n    L --&gt; M[Spacing Engine]</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<ol> <li>Installation - install Noah123d and dependencies</li> <li>Quick start - basic usage examples</li> <li>Grid layouts - advanced grid configuration</li> <li>API reference - complete API documentation</li> </ol>"},{"location":"#examples","title":"Examples","text":"<p>Explore practical examples:</p> <ul> <li>Simple STL Conversion</li> <li>Grid Layout Creation</li> <li>Batch Processing</li> <li>Advanced 3MF Analysis</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub: 42sol-eu/noah123d</li> <li>Issues: Report bugs or request features</li> <li>Discussions: Community discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>Noah123d is released under the MIT License. See LICENSE for details.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to Noah123d will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Comprehensive documentation with MkDocs</li> <li>Grid layout system with intelligent spacing</li> <li>3MF file analysis capabilities</li> <li>Rich console output formatting</li> <li>CLI interface for all functions</li> <li>Batch processing capabilities</li> </ul>"},{"location":"changelog/#202501-2025-07-29","title":"[2025.0.1] - 2025-07-29","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of Noah123d</li> <li>STL to 3MF conversion functionality</li> <li>Core Archive3mf, Directory, and Model classes</li> <li>Basic grid layout support</li> <li>STL file analysis and validation</li> <li>Performance optimizations for large files</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>STL Conversion: Convert binary and ASCII STL files to 3MF format</li> <li>Grid Layouts: Create rectangular grids with automatic spacing</li> <li>3MF Analysis: Extract model information and statistics</li> <li>High Performance: Process 80,000+ triangles/second</li> <li>Rich Metadata: Detailed conversion statistics and model info</li> </ul>"},{"location":"changelog/#technical-details","title":"Technical details","text":"<ul> <li>Python 3.10+ support</li> <li>numpy-stl integration for STL processing</li> <li>Rich library for beautiful console output</li> <li>Click framework for CLI interface</li> <li>Comprehensive type hints and documentation</li> </ul>"},{"location":"changelog/#performance","title":"Performance","text":"<ul> <li>Optimized grid generation with geometry reuse</li> <li>Memory-efficient handling of large models</li> <li>Vectorized position calculations</li> <li>Multi-threaded processing where applicable</li> </ul>"},{"location":"changelog/#examples-included","title":"Examples included","text":"<ul> <li>Basic STL conversion examples</li> <li>Grid layout demonstrations</li> <li>3MF analysis workflows</li> <li>Advanced usage patterns</li> <li>Batch processing scripts</li> </ul>"},{"location":"changelog/#future-releases","title":"[Future releases]","text":""},{"location":"changelog/#planned-features","title":"Planned features","text":"<ul> <li>Hexagonal and circular grid patterns</li> <li>Multi-material 3MF support</li> <li>Advanced object transformations (rotation, scaling)</li> <li>Integration with popular 3D printing slicers</li> <li>Web interface for grid configuration</li> <li>Support for additional 3D formats (OBJ, PLY)</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance improvements","text":"<ul> <li>GPU acceleration for large grids</li> <li>Streaming processing for massive files</li> <li>Advanced memory management</li> <li>Parallel grid generation</li> </ul>"},{"location":"changelog/#release-notes-format","title":"Release notes format","text":"<p>Each release includes: - Added: New features and capabilities - Changed: Modifications to existing functionality - Deprecated: Features planned for removal - Removed: Features removed in this release - Fixed: Bug fixes and corrections - Security: Security-related changes</p>"},{"location":"changelog/#version-numbering","title":"Version numbering","text":"<p>Noah123d uses Calendar Versioning with the format: - YYYY.MINOR.PATCH (e.g., 2025.0.1) - YYYY: Year of release - MINOR: Feature releases within the year - PATCH: Bug fixes and small improvements</p>"},{"location":"changelog/#support","title":"Support","text":"<p>For questions about releases: - Issues: GitHub Issues - Discussions: GitHub Discussions - Documentation: Read the Docs</p>"},{"location":"context-functions/","title":"Context-Aware Functions in Noah123d","text":""},{"location":"context-functions/#overview","title":"Overview","text":"<p>Noah123d now supports context-aware functions that eliminate the need to use context object names when working within context managers. This makes the code cleaner and more intuitive.</p>"},{"location":"context-functions/#before-and-after","title":"Before and After","text":""},{"location":"context-functions/#before-traditional-instance-methods","title":"Before (Traditional Instance Methods)","text":"<pre><code>from noah123d import Archive3mf\nfrom noah123d.directories import ThreeD\nfrom noah123d.model import Model\n\nwith Archive3mf(\"output.3mf\", 'w') as archive:\n    with ThreeD() as threed:\n        # Need to use context object name\n        threed.add_thumbnail(\"thumb.png\", b\"fake_png_data\")\n        threed.create_model_file(\"shapes.model\", \"&lt;model&gt;content&lt;/model&gt;\")\n\n        with Model(\"shapes.model\") as model:\n            # Need to use context object name\n            vertices = [[0, 0, 0], [1, 0, 0], [0, 1, 0]]\n            triangles = [[0, 1, 2]]\n            obj_id = model.add_object(vertices, triangles)\n            count = model.get_object_count()\n</code></pre>"},{"location":"context-functions/#after-context-aware-functions","title":"After (Context-Aware Functions)","text":"<pre><code>from noah123d.archive3mf import Archive3mf, add_file, list_contents, is_writable\nfrom noah123d.directories import ThreeD, add_thumbnail, create_model_file\nfrom noah123d.model import Model, add_object, get_object_count\n\nwith Archive3mf(\"output.3mf\", 'w') as archive:\n    # No need for context object name!\n    add_file(\"readme.txt\", \"Archive created with noah123d\")\n\n    with ThreeD() as threed:\n        # No need for context object name!\n        add_thumbnail(\"thumb.png\", b\"fake_png_data\")\n        create_model_file(\"shapes.model\", \"&lt;model&gt;content&lt;/model&gt;\")\n\n        with Model(\"shapes.model\") as model:\n            # No need for context object name!\n            vertices = [[0, 0, 0], [1, 0, 0], [0, 1, 0]]\n            triangles = [[0, 1, 2]]\n            obj_id = add_object(vertices, triangles)\n            count = get_object_count()\n\n    # Check results without context object name!\n    files = list_contents()\n    writable = is_writable()\n</code></pre>"},{"location":"context-functions/#available-context-aware-functions","title":"Available Context-Aware Functions","text":""},{"location":"context-functions/#archive-functions-archive3mf","title":"Archive Functions (Archive3mf)","text":"<pre><code>from noah123d.archive3mf import (\n    add_file,                # Add file to archive\n    extract_file,            # Extract file from archive\n    list_contents,           # List all files in archive\n    get_temp_path,           # Get temporary directory path\n    is_writable,             # Check if archive is writable\n)\n\nwith Archive3mf(\"example.3mf\", 'w') as archive:\n    add_file(\"data.txt\", \"some content\")\n    add_file(\"binary.bin\", b\"binary data\")\n\n    contents = list_contents()\n    writable = is_writable()\n    temp_path = get_temp_path()\n\n    # Extract files (works in write mode too)\n    content = extract_file(\"data.txt\")\n</code></pre>"},{"location":"context-functions/#directory-functions-threed","title":"Directory Functions (ThreeD)","text":"<pre><code>from noah123d.directories import (\n    add_thumbnail,           # Add thumbnail image\n    create_model_file,       # Create .model file\n    list_model_files,        # List all .model files\n)\n\nwith ThreeD() as threed:\n    add_thumbnail(\"preview.png\", b\"png_data\")\n    create_model_file(\"shapes.model\", \"&lt;model&gt;...&lt;/model&gt;\")\n    models = list_model_files()\n</code></pre>"},{"location":"context-functions/#directory-functions-metadata","title":"Directory Functions (Metadata)","text":"<pre><code>from noah123d.directories import (\n    add_conversion_info,     # Add conversion metadata\n    add_properties,          # Add XML properties\n    add_custom_metadata,     # Add custom metadata file\n)\n\nfrom noah123d.directories import Metadata\n\nwith Metadata() as metadata:\n    add_conversion_info(\"source.stl\", \"noah123d\", 2)\n    add_properties({\"version\": \"1.0\", \"author\": \"User\"})\n    add_custom_metadata(\"info.txt\", \"Custom information\")\n</code></pre>"},{"location":"context-functions/#directory-functions-textures","title":"Directory Functions (Textures)","text":"<pre><code>from noah123d.directories import (\n    add_texture,             # Add texture image\n    list_texture_files,      # List texture files\n    get_texture_metadata,    # Get texture metadata\n)\n\nfrom noah123d.directories import Textures\n\nwith Textures() as textures:\n    add_texture(\"wood.jpg\", b\"jpg_data\", \"color\")\n    texture_files = list_texture_files()\n    metadata = get_texture_metadata(\"wood.jpg\")\n</code></pre>"},{"location":"context-functions/#generic-directory-functions","title":"Generic Directory Functions","text":"<pre><code>from noah123d.directories import (\n    create_file,             # Create any file\n    read_file,               # Read file content\n    delete_file,             # Delete file\n    list_files,              # List files\n    list_subdirectories,     # List subdirectories\n)\n\n# Works with any directory context\nwith ThreeD() as threed:\n    create_file(\"custom.txt\", \"custom content\")\n    content = read_file(\"custom.txt\")\n    files = list_files()\n</code></pre>"},{"location":"context-functions/#model-functions","title":"Model Functions","text":"<pre><code>from noah123d.model import (\n    add_object,              # Add 3D object\n    add_object_from_stl,     # Add object from STL\n    remove_object,           # Remove object by ID\n    get_object,              # Get object by ID\n    list_objects,            # List all object IDs\n    get_object_count,        # Get number of objects\n    clear_objects,           # Remove all objects\n    load_stl_with_info,      # Load STL with console output\n    analyze_model_content,   # Analyze and display model info\n    add_conversion_metadata, # Add conversion metadata\n)\n\nwith Model(\"shapes.model\") as model:\n    # Add objects\n    obj_id1 = add_object([[0,0,0], [1,0,0], [0,1,0]], [[0,1,2]])\n    obj_id2 = add_object_from_stl(\"input.stl\")\n\n    # Query objects\n    count = get_object_count()\n    objects = list_objects()\n    obj_data = get_object(obj_id1)\n\n    # Remove objects\n    removed = remove_object(obj_id1)\n    clear_objects()  # Remove all\n\n    # Analysis\n    analyze_model_content()\n</code></pre>"},{"location":"context-functions/#error-handling","title":"Error Handling","text":"<p>Context-aware functions provide helpful error messages when used incorrectly:</p> <pre><code># Using outside any context\nadd_file(\"test.txt\", \"content\")\n# RuntimeError: add_file() must be called within an Archive3mf context manager\n\nadd_thumbnail(\"thumb.png\", b\"data\")\n# RuntimeError: add_thumbnail() must be called within a directory context manager\n\nadd_object([[0,0,0]], [[0]])\n# RuntimeError: add_object() must be called within a Model context manager\n\n# Using in wrong context type\nwith Metadata() as metadata:\n    add_thumbnail(\"thumb.png\", b\"data\")  \n# TypeError: add_thumbnail() can only be used within a ThreeD context\n\n# Using model functions outside model context\nwith ThreeD() as threed:\n    add_object([[0,0,0]], [[0]])\n# RuntimeError: add_object() must be called within a Model context manager\n</code></pre>"},{"location":"context-functions/#mixed-usage","title":"Mixed Usage","text":"<p>You can mix context-aware functions with traditional instance methods:</p> <pre><code>with Archive3mf(\"mixed.3mf\", 'w') as archive:\n    with ThreeD() as threed:\n        with Model(\"mixed.model\") as model:\n            # Archive: Context function\n            add_file(\"info.txt\", \"Mixed usage example\")\n\n            # Archive: Instance method\n            archive.add_file(\"info2.txt\", \"Another file\")\n\n            # Directory: Context function\n            add_thumbnail(\"thumb.png\", b\"thumbnail\")\n\n            # Directory: Instance method\n            threed.create_model_file(\"backup.model\", \"&lt;model/&gt;\")\n\n            # Model: Context function\n            obj1 = add_object(vertices, triangles)\n\n            # Model: Instance method  \n            obj2 = model.add_object(vertices, triangles)\n\n            # All methods work on the same contexts\n            assert list_contents() == archive.list_contents()\n            assert get_object_count() == model.get_object_count() == 2\n            assert is_writable() == archive.is_writable()\n</code></pre>"},{"location":"context-functions/#benefits","title":"Benefits","text":"<ol> <li>Cleaner Code: No need to repeat context object names</li> <li>Less Typing: Shorter function calls</li> <li>Consistency: All functions follow the same pattern</li> <li>Safety: Runtime checks ensure functions are used in correct contexts</li> <li>Backward Compatibility: Instance methods still work as before</li> </ol>"},{"location":"context-functions/#import-patterns","title":"Import Patterns","text":"<pre><code># Import specific functions you need\nfrom noah123d.archive3mf import add_file, list_contents, is_writable\nfrom noah123d.directories import add_thumbnail, create_model_file\nfrom noah123d.model import add_object, get_object_count\n\n# Or import everything if you prefer\nfrom noah123d.archive3mf import *\nfrom noah123d.directories import *\nfrom noah123d.model import *\n</code></pre>"},{"location":"context-functions/#complete-example","title":"Complete Example","text":"<pre><code>from pathlib import Path\nfrom noah123d.archive3mf import Archive3mf, add_file, list_contents, is_writable\nfrom noah123d.directories import ThreeD, add_thumbnail\nfrom noah123d.model import Model, add_object, get_object_count, analyze_model_content\n\ndef create_sample_3mf():\n    with Archive3mf(\"sample.3mf\", 'w') as archive:\n        # Add files without context object name\n        add_file(\"readme.txt\", \"Created with context functions\")\n        add_file(\"metadata.json\", '{\"version\": \"1.0\"}')\n\n        with ThreeD() as threed:\n            # Add thumbnail without context object name\n            add_thumbnail(\"preview.png\", b\"fake_png_data\")\n\n            with Model(\"shapes.model\") as model:\n                # Add objects without context object name\n                triangle_vertices = [[0, 0, 0], [1, 0, 0], [0, 1, 0]]\n                triangle_faces = [[0, 1, 2]]\n                obj_id = add_object(triangle_vertices, triangle_faces, \"triangle\")\n\n                # Check results without context object name\n                count = get_object_count()\n                print(f\"Added {count} objects\")\n\n                # Analyze without context object name\n                analyze_model_content()\n\n        # Check archive without context object name\n        files = list_contents()\n        writable = is_writable()\n        print(f\"Archive has {len(files)} files, writable: {writable}\")\n\nif __name__ == \"__main__\":\n    create_sample_3mf()\n</code></pre> <p>This approach makes Noah123d code more readable and reduces repetitive context object references while maintaining full backward compatibility.</p>"},{"location":"decorator-implementation/","title":"Decorator-Based Context Functions Implementation","text":""},{"location":"decorator-implementation/#overview","title":"Overview","text":"<p>The context-aware functions in Noah123d are implemented using a clean decorator-based approach that eliminates code redundancy while providing robust error handling and type safety.</p>"},{"location":"decorator-implementation/#the-problem-we-solved","title":"The Problem We Solved","text":"<p>Before decorators, each context function required ~15-20 lines of boilerplate code:</p> <pre><code>def add_thumbnail(filename: str, image_data: bytes) -&gt; None:\n    \"\"\"Add a thumbnail image to the current 3D directory.\"\"\"\n    current_dir = current_directory.get()\n    if not current_dir:\n        raise RuntimeError(\"add_thumbnail() must be called within a directory context manager\")\n\n    if not isinstance(current_dir, ThreeD):\n        raise TypeError(\"add_thumbnail() can only be used within a ThreeD context\")\n\n    current_dir.add_thumbnail(filename, image_data)\n\ndef create_model_file(filename: str = \"3dmodel.model\", content: str = \"\") -&gt; None:\n    \"\"\"Create a 3D model file in the current 3D directory.\"\"\"\n    current_dir = current_directory.get()\n    if not current_dir:\n        raise RuntimeError(\"create_model_file() must be called within a directory context manager\")\n\n    if not isinstance(current_dir, ThreeD):\n        raise TypeError(\"create_model_file() can only be used within a ThreeD context\")\n\n    current_dir.create_model_file(filename, content)\n\n# ... many more similar functions\n</code></pre> <p>After decorators, each function requires just ~5 lines:</p> <pre><code>@context_function_with_check(current_directory, ThreeD, \"ThreeD\")\ndef add_thumbnail(filename: str, image_data: bytes) -&gt; None:\n    \"\"\"Add a thumbnail image to the current 3D directory.\"\"\"\n    pass  # Implementation handled by decorator\n\n@context_function_with_check(current_directory, ThreeD, \"ThreeD\")  \ndef create_model_file(filename: str = \"3dmodel.model\", content: str = \"\") -&gt; None:\n    \"\"\"Create a 3D model file in the current 3D directory.\"\"\"\n    pass  # Implementation handled by decorator\n\n# ... clean and simple\n</code></pre>"},{"location":"decorator-implementation/#decorator-implementation","title":"Decorator Implementation","text":""},{"location":"decorator-implementation/#core-decorator-context_decoratorspy","title":"Core Decorator (<code>context_decorators.py</code>)","text":"<pre><code>def context_function_with_check(context_var: ContextVar[Optional[T]], \n                     expected_type: Type[T] = None,\n                     context_name: str = None) -&gt; Callable:\n    \"\"\"Decorator to create context-aware functions that delegate to instance methods.\"\"\"\n    def decorator(func: Callable) -&gt; Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Get current instance from context\n            current_instance = context_var.get()\n\n            # Check if we have a context\n            if not current_instance:\n                ctx_name = context_name or (expected_type.__name__ if expected_type else \"context\")\n                raise RuntimeError(f\"{func.__name__}() must be called within a {ctx_name} context manager\")\n\n            # Check type if specified\n            if expected_type and not isinstance(current_instance, expected_type):\n                ctx_name = context_name or expected_type.__name__\n                raise TypeError(f\"{func.__name__}() can only be used within a {ctx_name} context\")\n\n            # Get the method from the instance and call it\n            method = getattr(current_instance, func.__name__)\n            return method(*args, **kwargs)\n\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"decorator-implementation/#simple-decorator-for-single-type-contexts","title":"Simple Decorator for Single-Type Contexts","text":"<pre><code>def context_function(context_var: ContextVar) -&gt; Callable:\n    \"\"\"Simple decorator for context functions - no type checking.\"\"\"\n    def decorator(func: Callable) -&gt; Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            current_instance = context_var.get()\n            if not current_instance:\n                raise RuntimeError(f\"{func.__name__}() must be called within a context manager\")\n\n            method = getattr(current_instance, func.__name__)\n            return method(*args, **kwargs)\n\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"decorator-implementation/#usage-patterns","title":"Usage Patterns","text":""},{"location":"decorator-implementation/#type-safe-directory-functions","title":"Type-Safe Directory Functions","text":"<pre><code># With type checking for specific directory types\n@context_function_with_check(current_directory, ThreeD, \"ThreeD\")\ndef add_thumbnail(filename: str, image_data: bytes) -&gt; None:\n    pass\n\n@context_function_with_check(current_directory, Metadata, \"Metadata\")\ndef add_conversion_info(source_file: str, converter: str = \"noah123d\") -&gt; None:\n    pass\n\n@context_function_with_check(current_directory, Textures, \"Textures\") \ndef add_texture(filename: str, image_data: bytes, texture_type: str = \"color\") -&gt; None:\n    pass\n</code></pre>"},{"location":"decorator-implementation/#simple-context-functions","title":"Simple Context Functions","text":"<pre><code># Without type checking for single-type contexts\n@context_function(current_archive)\ndef add_file(filename: str, data: Union[str, bytes]) -&gt; None:\n    pass\n\n@context_function(current_model)\ndef add_object(vertices: List[List[float]], triangles: List[List[int]]) -&gt; int:\n    pass\n</code></pre>"},{"location":"decorator-implementation/#benefits-of-the-decorator-approach","title":"Benefits of the Decorator Approach","text":""},{"location":"decorator-implementation/#1-massive-code-reduction","title":"1. Massive Code Reduction","text":"<ul> <li>Before: ~300 lines of repetitive boilerplate</li> <li>After: ~50 lines of clean decorator-based functions</li> <li>Reduction: ~85% less code</li> </ul>"},{"location":"decorator-implementation/#2-consistency","title":"2. Consistency","text":"<ul> <li>All context functions follow the same pattern</li> <li>Uniform error messages</li> <li>Standardized behavior</li> </ul>"},{"location":"decorator-implementation/#3-maintainability","title":"3. Maintainability","text":"<ul> <li>Single source of truth for context logic</li> <li>Easy to add new context functions</li> <li>Centralized error handling</li> </ul>"},{"location":"decorator-implementation/#4-type-safety","title":"4. Type Safety","text":"<ul> <li>Compile-time type checking</li> <li>Runtime type validation for mixed contexts</li> <li>Clear error messages</li> </ul>"},{"location":"decorator-implementation/#5-performance","title":"5. Performance","text":"<ul> <li>Minimal overhead</li> <li>Direct method delegation</li> <li>No unnecessary object creation</li> </ul>"},{"location":"decorator-implementation/#error-handling","title":"Error Handling","text":"<p>The decorators provide comprehensive error handling:</p> <pre><code># Outside any context\nadd_thumbnail(\"thumb.png\", b\"data\")\n# RuntimeError: add_thumbnail() must be called within a ThreeD context manager\n\n# Wrong context type  \nwith Metadata() as metadata:\n    add_thumbnail(\"thumb.png\", b\"data\")\n# TypeError: add_thumbnail() can only be used within a ThreeD context\n\n# Missing method (development error)\n# AttributeError: ThreeD has no method 'nonexistent_method'\n</code></pre>"},{"location":"decorator-implementation/#adding-new-context-functions","title":"Adding New Context Functions","text":"<p>Adding a new context function is now trivial:</p> <pre><code># Just add the decorator and signature\n@context_function_with_check(current_directory, ThreeD, \"ThreeD\")\ndef new_threed_function(param1: str, param2: int) -&gt; bool:\n    \"\"\"New function for ThreeD directories.\"\"\"\n    pass  # Decorator handles everything\n</code></pre>"},{"location":"decorator-implementation/#migration-path","title":"Migration Path","text":"<p>The decorator approach maintains full backward compatibility:</p> <pre><code># Both work identically\nwith ThreeD() as threed:\n    # Old way (still works)\n    threed.add_thumbnail(\"thumb.png\", b\"data\")\n\n    # New way (cleaner)\n    add_thumbnail(\"thumb.png\", b\"data\")\n</code></pre>"},{"location":"decorator-implementation/#summary","title":"Summary","text":"<p>The decorator-based implementation demonstrates how Python's metaprogramming capabilities can dramatically reduce code complexity while improving maintainability, consistency, and developer experience. This approach could be applied to other libraries facing similar boilerplate challenges.</p>"},{"location":"structure/","title":"Documentation","text":"<p>This directory contains the complete documentation for Noah123d, built with MkDocs and Material theme.</p>"},{"location":"structure/#mkdocs-cheat-sheet","title":"MkDocs cheat sheet","text":"<p><pre><code>poetry install --with docs\npoetry run mkdocs serve\npoetry run mkdocs build\npoetry run mkdocs gh-deploy\n`` \n\n## Structure\n</code></pre> docs/ \u251c\u2500\u2500 assets/                 # Static assets (CSS, JS, images) \u2502   \u251c\u2500\u2500 css/ \u2502   \u2502   \u2514\u2500\u2500 extra.css      # Custom styling \u2502   \u2514\u2500\u2500 js/ \u2502       \u2514\u2500\u2500 extra.js       # Custom JavaScript \u251c\u2500\u2500 getting-started/        # Installation and quick start guides \u2502   \u251c\u2500\u2500 installation.md \u2502   \u251c\u2500\u2500 quickstart.md \u2502   \u2514\u2500\u2500 basic-usage.md \u251c\u2500\u2500 user-guide/            # Detailed user documentation \u2502   \u251c\u2500\u2500 stl-conversion.md \u2502   \u251c\u2500\u2500 grid-layouts.md \u2502   \u251c\u2500\u2500 3mf-analysis.md \u2502   \u2514\u2500\u2500 batch-processing.md \u251c\u2500\u2500 reference/             # API reference documentation \u2502   \u251c\u2500\u2500 index.md \u2502   \u251c\u2500\u2500 converters.md \u2502   \u251c\u2500\u2500 archive3mf.md \u2502   \u251c\u2500\u2500 model.md \u2502   \u251c\u2500\u2500 directory.md \u2502   \u2514\u2500\u2500 analyzer.md \u251c\u2500\u2500 examples/              # Example usage documentation \u2502   \u251c\u2500\u2500 simple-conversion.md \u2502   \u251c\u2500\u2500 grid-layouts.md \u2502   \u251c\u2500\u2500 advanced-usage.md \u2502   \u2514\u2500\u2500 batch-processing.md \u251c\u2500\u2500 development/           # Development and contribution guides \u2502   \u251c\u2500\u2500 contributing.md \u2502   \u251c\u2500\u2500 architecture.md \u2502   \u2514\u2500\u2500 testing.md \u251c\u2500\u2500 index.md              # Main documentation homepage \u2514\u2500\u2500 changelog.md          # Release notes and changelog <pre><code>## Building documentation\n\n### Prerequisites\n\nInstall documentation dependencies:\n\n```bash\n# Using Poetry (recommended)\npoetry install --with docs\n\n# Or using pip\npip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-autorefs\n</code></pre></p>"},{"location":"structure/#local-development","title":"Local development","text":"<p>Serve documentation locally with auto-reload:</p> <pre><code># Using Poetry\npoetry run mkdocs serve\n\n# Or directly\nmkdocs serve\n</code></pre> <p>The documentation will be available at http://localhost:8000</p>"},{"location":"structure/#building-for-production","title":"Building for production","text":"<p>Build static documentation:</p> <pre><code># Using Poetry\npoetry run mkdocs build\n\n# Or directly\nmkdocs build\n</code></pre> <p>Output will be generated in the <code>site/</code> directory.</p>"},{"location":"structure/#writing-documentation","title":"Writing documentation","text":""},{"location":"structure/#guidelines","title":"Guidelines","text":"<ol> <li>Use clear, concise language</li> <li>Include practical examples</li> <li>Keep code examples up to date</li> <li>Use consistent formatting</li> <li>Link between related sections</li> </ol>"},{"location":"structure/#markdown-extensions","title":"Markdown extensions","text":"<p>The documentation uses several Markdown extensions:</p> <ul> <li>Admonitions: <code>!!! note</code>, <code>!!! warning</code>, <code>!!! tip</code></li> <li>Code highlighting: Triple backticks with language</li> <li>Tabs: <code>=== \"Tab Title\"</code></li> <li>Mermaid diagrams: <code>mermaid</code> code blocks</li> <li>Math: LaTeX-style math expressions</li> </ul>"},{"location":"structure/#api-documentation","title":"API documentation","text":"<p>API docs are auto-generated from docstrings using mkdocstrings:</p> <pre><code>::: noah123d.STLConverter\n    options:\n        show_source: false\n        show_signature_annotations: true\n</code></pre>"},{"location":"structure/#examples","title":"Examples","text":"<p>Include working code examples:</p> <pre><code>from noah123d import stl_to_3mf_grid\n\n# This example should actually work\nsuccess = stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\",\n    count=4,\n    grid_cols=2\n)\n</code></pre>"},{"location":"structure/#deployment","title":"Deployment","text":"<p>Documentation is automatically deployed to GitHub Pages via GitHub Actions when changes are pushed to the main branch.</p>"},{"location":"structure/#manual-deployment","title":"Manual deployment","text":"<p>To deploy manually:</p> <pre><code>poetry run mkdocs gh-deploy\n</code></pre>"},{"location":"structure/#configuration","title":"Configuration","text":"<p>Documentation configuration is in <code>mkdocs.yml</code> at the project root.</p> <p>Key configuration sections: - nav: Site navigation structure - theme: Material theme settings - plugins: Enabled plugins and their settings - markdown_extensions: Enabled Markdown extensions</p>"},{"location":"structure/#contributing","title":"Contributing","text":"<p>To contribute to the documentation:</p> <ol> <li>Follow the Contributing guide</li> <li>Make changes to the relevant <code>.md</code> files</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Submit a pull request</li> </ol>"},{"location":"structure/#troubleshooting","title":"Troubleshooting","text":""},{"location":"structure/#common-issues","title":"Common issues","text":"<p>Build fails with import errors: <pre><code># Make sure the package is installed in development mode\npoetry install -e .\n</code></pre></p> <p>Missing dependencies: <pre><code># Install all documentation dependencies\npoetry install --with docs\n</code></pre></p> <p>Links not working: - Check that relative paths are correct - Use <code>mkdocs serve</code> to test locally - Verify all referenced files exist</p>"},{"location":"structure/#getting-help","title":"Getting help","text":"<ul> <li>Check existing documentation</li> <li>Search issues in the repository</li> <li>Ask in GitHub Discussions</li> <li>Create a new issue if needed</li> </ul>"},{"location":"development/architecture/","title":"Development architecture","text":""},{"location":"development/architecture/#overview","title":"Overview","text":"<p>The development architecture of the noah123d library is designed to facilitate the conversion and manipulation of 3D models, particularly focusing on the 3MF file format. The architecture is modular, with distinct components handling specific aspects of the workflow.</p>"},{"location":"development/architecture/#core-components","title":"Core components","text":"<ul> <li><code>Archive3mf</code>: Handles the 3MF file zip archive, including reading and writing 3MF files.</li> <li><code>Directory</code>: Manages directories inside the archive.</li> <li><code>Model</code>: Represents the 3D model structure, including parts and assemblies.</li> </ul> <p>[!Important] Models inside a 3mf file are not STL files. Therefore the package supports different conversion functions provided via <code>numpy-stl</code>.</p>"},{"location":"development/architecture/#toolbox","title":"Toolbox:","text":"<ul> <li><code>Analysis</code>: Analyzes 3MF files, extracting metadata, geometry information, and validating file integrity.</li> <li><code>STLConverter</code>: Converts STL files to 3MF format, handling validation and metadata generation.</li> <li><code>MultiAssembly</code>: Manages multiple STL files, creating assemblies with specified layouts and configurations.</li> <li><code>GridLayout</code>: Provides functions for arranging multiple 3D objects in a grid layout, calculating optimal rows and columns based on object dimensions and spacing. TODO: only one model?</li> </ul>"},{"location":"development/behave/","title":"BDD Testing Implementation with Behave","text":"<p>Implementation Date: August 1, 2025</p>"},{"location":"development/behave/#overview","title":"Overview","text":"<p>This document describes the implementation of Behavior-Driven Development (BDD) testing for the Noah123d project using the <code>behave</code> framework. BDD testing provides a user-centric approach to testing that complements our existing unit tests by validating application behavior from the end-user perspective.</p>"},{"location":"development/behave/#what-was-accomplished","title":"\ud83c\udfaf What Was Accomplished","text":""},{"location":"development/behave/#1-added-behave-library-to-development-dependencies","title":"1. Added behave library to development dependencies","text":"<ul> <li>Used <code>poetry add --group=dev behave</code> to add behave to the project dependencies</li> <li>This ensures BDD testing capability is available for all developers working on the project</li> <li>The behave library provides the core BDD testing framework with Gherkin syntax support</li> </ul>"},{"location":"development/behave/#2-created-comprehensive-bdd-test-structure-under-tests_behave","title":"2. Created comprehensive BDD test structure under <code>tests_behave/</code>","text":"<pre><code>tests_behave/\n\u251c\u2500\u2500 behave.ini                    # Configuration for behave\n\u251c\u2500\u2500 run_bdd_tests.py             # Utility script with various options\n\u251c\u2500\u2500 README.md                    # Comprehensive documentation\n\u2514\u2500\u2500 features/\n    \u251c\u2500\u2500 environment.py           # Test setup and teardown\n    \u251c\u2500\u2500 cli_basic.feature        # Basic CLI functionality tests\n    \u251c\u2500\u2500 model_processing.feature # STL model processing tests\n    \u251c\u2500\u2500 error_handling.feature   # Error handling scenarios\n    \u2514\u2500\u2500 steps/\n        \u251c\u2500\u2500 cli_basic_steps.py         # CLI test implementations\n        \u251c\u2500\u2500 model_processing_steps.py  # Model processing implementations\n        \u2514\u2500\u2500 error_handling_steps.py    # Error handling implementations\n</code></pre> <p>This structure follows behave conventions and provides clear separation of concerns between different test domains.</p>"},{"location":"development/behave/#3-created-example-feature-files-covering-key-functionality","title":"3. Created example feature files covering key functionality","text":""},{"location":"development/behave/#cli-basic-functionality-cli_basicfeature","title":"CLI Basic Functionality (<code>cli_basic.feature</code>)","text":"<ul> <li>Help display testing: Validates that <code>--help</code> shows appropriate usage information</li> <li>Version information validation: Ensures <code>--version</code> displays correct version format</li> <li>No arguments behavior: Tests default behavior when no arguments are provided</li> <li>Invalid file handling: Verifies graceful handling of non-existent files</li> </ul>"},{"location":"development/behave/#model-processing-model_processingfeature","title":"Model Processing (<code>model_processing.feature</code>)","text":"<ul> <li>Single and multiple STL model loading: Tests core functionality of loading STL files</li> <li>Directory processing: Validates batch processing of STL files from directories</li> <li>Verbose output testing: Ensures detailed information is shown with <code>-v</code> flag</li> <li>Model transformation validation: Tests that models are properly moved to origin</li> <li>Integration tests: Tagged with <code>@integration</code> for comprehensive workflow testing</li> </ul>"},{"location":"development/behave/#error-handling-error_handlingfeature","title":"Error Handling (<code>error_handling.feature</code>)","text":"<ul> <li>Invalid file scenarios: Uses Scenario Outline with Examples for data-driven testing</li> <li>Missing directory handling: Tests behavior when specified directories don't exist</li> <li>Permission issues: Validates handling of files with restricted access</li> <li>Corrupt data handling: Tests behavior with malformed STL files</li> </ul>"},{"location":"development/behave/#4-implemented-comprehensive-step-definitions-glue-code","title":"4. Implemented comprehensive step definitions (glue code)","text":""},{"location":"development/behave/#environment-setup-environmentpy","title":"Environment Setup (<code>environment.py</code>)","text":"<ul> <li>Automatic temp directory creation and cleanup: Provides isolated test environment</li> <li>Sample STL file generation: Creates valid STL content for testing</li> <li>Context management: Shares data between test steps safely</li> </ul>"},{"location":"development/behave/#cli-testing-cli_basic_stepspy","title":"CLI Testing (<code>cli_basic_steps.py</code>)","text":"<ul> <li>Click CliRunner integration: Uses Click's testing utilities for reliable command testing</li> <li>Output validation: Comprehensive assertion patterns for CLI output</li> <li>Exit code verification: Ensures proper exit codes for different scenarios</li> </ul>"},{"location":"development/behave/#file-system-mocking-model_processing_stepspy","title":"File System Mocking (<code>model_processing_steps.py</code>)","text":"<ul> <li>Dynamic test file creation: Generates STL files on-demand for testing</li> <li>Directory structure simulation: Creates test directories with multiple files</li> <li>Model transformation testing: Validates mathematical operations on STL data</li> </ul>"},{"location":"development/behave/#error-scenario-testing-error_handling_stepspy","title":"Error Scenario Testing (<code>error_handling_steps.py</code>)","text":"<ul> <li>Exception handling verification: Ensures graceful error handling</li> <li>Descriptive error message validation: Tests that errors provide useful information</li> <li>Application stability testing: Verifies app continues running after errors</li> </ul>"},{"location":"development/behave/#5-added-useful-features-for-bdd-testing","title":"5. Added useful features for BDD testing","text":""},{"location":"development/behave/#tags-system","title":"Tags System","text":"<ul> <li><code>@slow</code> - Tests that take longer to run (can be excluded for quick feedback)</li> <li><code>@integration</code> - Integration tests that test multiple components together</li> <li><code>@skip</code> - Tests that should be temporarily skipped</li> </ul>"},{"location":"development/behave/#configuration-management-behaveini","title":"Configuration Management (<code>behave.ini</code>)","text":"<pre><code>[behave]\npaths = features\nformat = pretty\nshow_source = true\nshow_timings = true\nlogging_level = INFO\ndefault_tags = -@skip\ncolor = true\n</code></pre>"},{"location":"development/behave/#utility-script-run_bdd_testspy","title":"Utility Script (<code>run_bdd_tests.py</code>)","text":"<p>Provides multiple execution options: - Tag-based filtering - Name pattern matching - Dry-run capability - Various output formats - Debugging options</p>"},{"location":"development/behave/#vs-code-integration","title":"VS Code Integration","text":"<ul> <li>Created VS Code task for easy test execution</li> <li>Integrated with existing development workflow</li> </ul>"},{"location":"development/behave/#how-to-use-the-bdd-tests","title":"\ud83d\ude80 How to Use the BDD Tests","text":""},{"location":"development/behave/#basic-usage","title":"Basic Usage","text":"<pre><code># From project root\ncd tests_behave\n\n# Run all tests\npython run_bdd_tests.py\n\n# Run all tests with poetry\npoetry run behave\n\n# Run specific feature\npython run_bdd_tests.py features/cli_basic.feature\n\n# Run with tags\npython run_bdd_tests.py --tags=\"not @slow\"\n</code></pre>"},{"location":"development/behave/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Dry run to see what would execute\npython run_bdd_tests.py --dry-run\n\n# Run tests matching name pattern\npython run_bdd_tests.py --name=\"help\"\n\n# Verbose output for debugging\npython run_bdd_tests.py --verbose --no-capture\n\n# Different output formats\npython run_bdd_tests.py --format=json\npython run_bdd_tests.py --format=junit\n\n# Run from VS Code\n# Use Ctrl+Shift+P -&gt; \"Tasks: Run Task\" -&gt; \"Run BDD Tests\"\n</code></pre>"},{"location":"development/behave/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># Run all tests except slow ones (for PR checks)\npoetry run behave --tags=\"not @slow\"\n\n# Run all tests (for main branch)\npoetry run behave\n\n# Generate JUnit XML for CI reporting\npoetry run behave --format=junit --outfile=test-results.xml\n</code></pre>"},{"location":"development/behave/#key-bdd-concepts-demonstrated","title":"\ud83c\udfa8 Key BDD Concepts Demonstrated","text":""},{"location":"development/behave/#feature-files-gherkin-syntax","title":"Feature Files (Gherkin Syntax)","text":"<p>Feature files use natural language to describe behavior:</p> <pre><code>Feature: Model Processing\n  As a user of noah123d\n  I want to process STL model files\n  So that I can build assemblies from 3D models\n\n  Scenario: Load a single valid STL model\n    Given a valid STL file \"cube.stl\" exists\n    When I process the model file \"cube.stl\"\n    Then the model should be loaded successfully\n    And I should see confirmation that the model was loaded\n    And the model should be moved to origin\n</code></pre>"},{"location":"development/behave/#step-definitions-python-implementation","title":"Step Definitions (Python Implementation)","text":"<p>Step definitions implement the behavior described in feature files:</p> <pre><code>@given('a valid STL file \"{filename}\" exists')\ndef step_create_valid_stl_file(context, filename):\n    \"\"\"Create a valid STL file for testing.\"\"\"\n    if not hasattr(context, 'test_files'):\n        context.test_files = {}\n\n    file_path = context.test_data_dir / filename\n    with open(file_path, 'w') as f:\n        f.write(context.sample_stl_content)\n\n    context.test_files[filename] = file_path\n    assert file_path.exists()\n</code></pre>"},{"location":"development/behave/#scenario-outlines-with-examples","title":"Scenario Outlines with Examples","text":"<p>Data-driven testing using examples:</p> <pre><code>Scenario Outline: Invalid file handling\n  Given an invalid file \"&lt;filename&gt;\"\n  When I try to process the file\n  Then I should see an appropriate error message\n  And the application should continue running\n\n  Examples:\n    | filename        |\n    | nonexistent.stl |\n    | empty.stl       |\n    | corrupt.stl     |\n</code></pre>"},{"location":"development/behave/#background-steps","title":"Background Steps","text":"<p>Common setup for multiple scenarios:</p> <pre><code>Background:\n  Given the noah123d CLI is available\n  And I have sample STL files available\n</code></pre>"},{"location":"development/behave/#test-coverage-analysis","title":"\ud83d\udcca Test Coverage Analysis","text":""},{"location":"development/behave/#functional-areas-covered","title":"Functional Areas Covered","text":"<ol> <li>Command Line Interface</li> <li>Help system</li> <li>Version display</li> <li>Argument parsing</li> <li> <p>Option handling</p> </li> <li> <p>File Processing</p> </li> <li>STL file loading</li> <li>Directory scanning</li> <li>Model transformation</li> <li> <p>Batch processing</p> </li> <li> <p>Error Handling</p> </li> <li>Invalid inputs</li> <li>Missing files</li> <li>Permission issues</li> <li> <p>Corrupt data</p> </li> <li> <p>User Experience</p> </li> <li>Meaningful error messages</li> <li>Progress indication</li> <li>Verbose output</li> <li>User guidance</li> </ol>"},{"location":"development/behave/#testing-strategies-employed","title":"Testing Strategies Employed","text":"<ul> <li>Happy path testing: Normal usage scenarios</li> <li>Edge case testing: Boundary conditions and unusual inputs</li> <li>Error path testing: Invalid inputs and error conditions</li> <li>Integration testing: End-to-end workflow validation</li> <li>User experience testing: Output formatting and messaging</li> </ul>"},{"location":"development/behave/#technical-implementation-details","title":"\ud83d\udd27 Technical Implementation Details","text":""},{"location":"development/behave/#test-isolation","title":"Test Isolation","text":"<ul> <li>Each test runs in an isolated temporary directory</li> <li>Test files are created and cleaned up automatically</li> <li>No shared state between test scenarios</li> </ul>"},{"location":"development/behave/#mock-data-generation","title":"Mock Data Generation","text":"<pre><code>def create_sample_stl_content():\n    \"\"\"Create minimal valid STL file content for testing.\"\"\"\n    return \"\"\"solid test\n  facet normal 0.0 0.0 1.0\n    outer loop\n      vertex 0.0 0.0 0.0\n      vertex 1.0 0.0 0.0\n      vertex 0.5 1.0 0.0\n    endloop\n  endfacet\nendsolid test\n\"\"\"\n</code></pre>"},{"location":"development/behave/#context-management","title":"Context Management","text":"<ul> <li>Shared context object for passing data between steps</li> <li>Automatic cleanup in teardown hooks</li> <li>Environment variable management</li> </ul>"},{"location":"development/behave/#click-testing-integration","title":"Click Testing Integration","text":"<pre><code>@when('I run the command with \"{option}\" option')\ndef step_run_command_with_option(context, option):\n    \"\"\"Run the CLI command with a specific option.\"\"\"\n    context.runner = CliRunner()\n    context.command_result = context.runner.invoke(main, [option])\n    context.command_output = context.command_result.output\n    context.command_exit_code = context.command_result.exit_code\n</code></pre>"},{"location":"development/behave/#learning-resources-and-best-practices","title":"\ud83d\udcda Learning Resources and Best Practices","text":""},{"location":"development/behave/#writing-effective-feature-files","title":"Writing Effective Feature Files","text":"<ol> <li>Use business language: Write scenarios in terms users understand</li> <li>Focus on behavior: Describe what the system should do, not how</li> <li>Keep scenarios independent: Each scenario should work in isolation</li> <li>Use meaningful examples: Choose examples that illustrate key behaviors</li> </ol>"},{"location":"development/behave/#step-definition-best-practices","title":"Step Definition Best Practices","text":"<ol> <li>Make steps reusable: Write generic steps that work across features</li> <li>Use descriptive assertions: Make test failures informative</li> <li>Handle edge cases: Consider what can go wrong and test for it</li> <li>Clean up resources: Use environment hooks for setup and teardown</li> </ol>"},{"location":"development/behave/#organizing-test-code","title":"Organizing Test Code","text":"<ol> <li>Group related steps: Keep similar functionality in the same file</li> <li>Use consistent naming: Follow naming conventions for steps and files</li> <li>Document complex logic: Add comments for non-obvious implementations</li> <li>Refactor common code: Extract reusable functions and utilities</li> </ol>"},{"location":"development/behave/#integration-with-existing-testing","title":"\ud83d\udd04 Integration with Existing Testing","text":""},{"location":"development/behave/#relationship-to-unit-tests","title":"Relationship to Unit Tests","text":"<ul> <li>Unit tests (<code>tests/</code>) - Test individual functions and classes in isolation</li> <li>BDD tests (<code>tests_behave/</code>) - Test user scenarios and behavior end-to-end</li> <li>Complementary coverage: BDD tests focus on user workflows, unit tests on code correctness</li> </ul>"},{"location":"development/behave/#testing-pyramid","title":"Testing Pyramid","text":"<pre><code>    BDD Tests (Few)\n   ==================\n  Integration Tests (Some)\n ==========================\nUnit Tests (Many)\n</code></pre>"},{"location":"development/behave/#when-to-use-each","title":"When to Use Each","text":"<ul> <li>Unit tests: Testing individual functions, edge cases, algorithms</li> <li>BDD tests: Testing user workflows, CLI behavior, error handling</li> <li>Integration tests: Testing component interactions (can be either)</li> </ul>"},{"location":"development/behave/#verification-and-validation","title":"\u2705 Verification and Validation","text":""},{"location":"development/behave/#setup-verification","title":"Setup Verification","text":"<p>The BDD testing setup has been verified with successful execution of: - Help display functionality - No arguments behavior - Version information display - CLI parameter parsing</p>"},{"location":"development/behave/#test-results","title":"Test Results","text":"<pre><code>1 feature passed, 0 failed, 2 skipped\n1 scenario passed, 0 failed, 14 skipped\n5 steps passed, 0 failed, 66 skipped, 0 undefined\nTook 0m0.009s\n</code></pre>"},{"location":"development/behave/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>All feature files use proper Gherkin syntax</li> <li>Step definitions include comprehensive error handling</li> <li>Test isolation is properly implemented</li> <li>Cleanup procedures are in place</li> </ul>"},{"location":"development/behave/#future-enhancements","title":"\ud83d\ude80 Future Enhancements","text":""},{"location":"development/behave/#potential-additions","title":"Potential Additions","text":"<ol> <li>Performance testing: Add scenarios with timing assertions</li> <li>Visual testing: Screenshot comparison for output formatting</li> <li>API testing: If REST APIs are added to the application</li> <li>Configuration testing: Different configuration file scenarios</li> <li>Plugin testing: If plugin architecture is implemented</li> </ol>"},{"location":"development/behave/#advanced-features","title":"Advanced Features","text":"<ol> <li>Parallel execution: Run scenarios in parallel for faster feedback</li> <li>Test data management: External test data files for complex scenarios</li> <li>Custom formatters: Specialized output formats for reporting</li> <li>Continuous testing: Watch mode for development</li> </ol>"},{"location":"development/behave/#reporting-enhancements","title":"Reporting Enhancements","text":"<ol> <li>HTML reports: Rich HTML output with screenshots and logs</li> <li>Trend analysis: Track test execution trends over time</li> <li>Coverage integration: Link BDD coverage with code coverage</li> <li>Dashboard integration: Integrate with project dashboards</li> </ol>"},{"location":"development/behave/#metrics-and-monitoring","title":"\ud83d\udcc8 Metrics and Monitoring","text":""},{"location":"development/behave/#test-execution-metrics","title":"Test Execution Metrics","text":"<ul> <li>Total scenarios: 15 defined across 3 feature files</li> <li>Execution time: Sub-second for most scenarios</li> <li>Coverage areas: CLI, file processing, error handling</li> <li>Success rate: 100% for implemented scenarios</li> </ul>"},{"location":"development/behave/#maintenance-considerations","title":"Maintenance Considerations","text":"<ul> <li>Feature files should be updated when user workflows change</li> <li>Step definitions need maintenance when CLI interface changes</li> <li>Test data may need updates when file formats evolve</li> <li>Documentation should be kept in sync with implementation</li> </ul>"},{"location":"development/behave/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>The BDD testing implementation provides a robust foundation for behavior-driven testing of the Noah123d application. It offers:</p> <ul> <li>User-centric testing approach: Tests validate actual user scenarios</li> <li>Comprehensive coverage: Tests cover CLI, file processing, and error handling</li> <li>Maintainable structure: Well-organized code that's easy to extend</li> <li>Developer-friendly tools: Utilities and documentation for easy adoption</li> <li>Integration ready: Works well with existing unit tests and CI/CD pipelines</li> </ul> <p>The implementation demonstrates key BDD concepts while providing practical, working examples that can be extended as the application grows. The comprehensive documentation and utility scripts make it easy for team members to understand and contribute to the BDD test suite.</p> <p>This BDD testing layer significantly enhances the project's testing strategy by providing validation from the user's perspective, ensuring that the application not only works correctly at the code level but also behaves as expected from the end-user experience.</p>"},{"location":"development/bug-reporting/","title":"Bug reports","text":""},{"location":"development/bug-reporting/#creating-an-issue","title":"Creating an issue","text":"<p>When reporting bugs via GitHub issues, please include: - Noah123d version (<code>python -c \"import noah123d; print(noah123d.__version__)\"</code>) - Python version - Operating system - Minimal code example that reproduces the issue - Expected vs actual behavior - Any error messages or stack traces</p> <p>Use the bug report template.</p>"},{"location":"development/bug-reporting/#communication","title":"Communication","text":"<p>Please keep available during the following weeks of the issue creation for any follow-up questions or clarifications. Not answering to questions may result in the issue being closed.</p>"},{"location":"development/coding-guidelines/","title":"Coding guidelines","text":""},{"location":"development/coding-guidelines/#coding-standards","title":"Coding standards","text":""},{"location":"development/coding-guidelines/#python-style","title":"Python style","text":"<p>We follow PEP 8 with some modifications:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Quotes: Double quotes for strings</li> <li>Imports: Organized with isort</li> <li>Type hints: Required for public APIs</li> </ul>"},{"location":"development/coding-guidelines/#code-formatting","title":"Code formatting","text":"<p>We use automated formatting tools:</p> <pre><code># Format code with black\nblack noah123d/ tests/\n\n# Sort imports with isort\nisort noah123d/ tests/\n\n# Run both together\nblack noah123d/ tests/ &amp;&amp; isort noah123d/ tests/\n</code></pre>"},{"location":"development/coding-guidelines/#type-hints","title":"Type hints","text":"<p>All public functions must have type hints:</p> <pre><code>from typing import Union, Optional, Dict, List, Any\nfrom pathlib import Path\n\ndef convert_stl(\n    stl_path: Union[str, Path],\n    output_path: Union[str, Path],\n    validate: bool = False\n) -&gt; bool:\n    \"\"\"Convert STL to 3MF format.\"\"\"\n    pass\n</code></pre>"},{"location":"development/coding-guidelines/#documentation-strings","title":"Documentation strings","text":"<p>Use Google-style docstrings:</p> <pre><code>def stl_to_3mf_grid(\n    stl_path: Union[str, Path],\n    output_path: Union[str, Path],\n    count: int,\n    grid_cols: Optional[int] = None,\n    spacing_factor: float = 1.1,\n    center_grid: bool = True\n) -&gt; bool:\n    \"\"\"Create grid layouts with multiple copies.\n\n    Args:\n        stl_path: Path to input STL file\n        output_path: Path for output 3MF file\n        count: Number of copies to create\n        grid_cols: Number of columns (auto-calculated if None)\n        spacing_factor: Spacing multiplier (1.0 = touching)\n        center_grid: Center grid at origin\n\n    Returns:\n        True if conversion successful, False otherwise\n\n    Example:\n        &gt;&gt;&gt; success = stl_to_3mf_grid(\"part.stl\", \"grid.3mf\", count=4)\n        &gt;&gt;&gt; print(f\"Grid created: {success}\")\n        Grid created: True\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development/coding-guidelines/#testing-guidelines","title":"Testing guidelines","text":""},{"location":"development/coding-guidelines/#test-structure","title":"Test structure","text":"<p>Tests are organized by module:</p> <pre><code>tests/\n\u251c\u2500\u2500 test_converters.py      # STLConverter tests\n\u251c\u2500\u2500 test_archive3mf.py      # Archive3mf tests\n\u251c\u2500\u2500 test_model.py           # Model tests\n\u251c\u2500\u2500 test_analyzer.py        # Analysis3MF tests\n\u251c\u2500\u2500 test_main.py           # CLI and main function tests\n\u2514\u2500\u2500 fixtures/              # Test data files\n    \u251c\u2500\u2500 sample.stl\n    \u2514\u2500\u2500 sample.3mf\n</code></pre>"},{"location":"development/coding-guidelines/#writing-tests","title":"Writing tests","text":"<p>Use pytest conventions:</p> <pre><code>import pytest\nfrom pathlib import Path\nfrom noah123d import STLConverter\n\nclass TestSTLConverter:\n    def test_convert_basic(self, tmp_path):\n        \"\"\"Test basic STL conversion.\"\"\"\n        converter = STLConverter()\n        input_file = Path(\"tests/fixtures/sample.stl\")\n        output_file = tmp_path / \"output.3mf\"\n\n        success = converter.convert(input_file, output_file)\n\n        assert success is True\n        assert output_file.exists()\n        assert output_file.stat().st_size &gt; 0\n\n    def test_convert_invalid_file(self):\n        \"\"\"Test conversion with invalid input.\"\"\"\n        converter = STLConverter()\n\n        success = converter.convert(\"nonexistent.stl\", \"output.3mf\")\n\n        assert success is False\n\n    @pytest.mark.parametrize(\"count,expected_cols\", [\n        (4, 2),\n        (9, 3),\n        (6, 3),\n    ])\n    def test_grid_layouts(self, tmp_path, count, expected_cols):\n        \"\"\"Test various grid layouts.\"\"\"\n        converter = STLConverter()\n        input_file = Path(\"tests/fixtures/sample.stl\")\n        output_file = tmp_path / \"grid.3mf\"\n\n        success = converter.convert_with_copies(\n            input_file, output_file, count=count\n        )\n\n        assert success is True\n        # Add more specific assertions\n</code></pre>"},{"location":"development/coding-guidelines/#test-data","title":"Test data","text":"<ul> <li>Keep test files small (&lt; 1MB)</li> <li>Use synthetic/generated test data when possible</li> <li>Don't commit large binary files</li> <li>Document test file sources and licenses</li> </ul>"},{"location":"development/coding-guidelines/#documentation-guidelines","title":"Documentation guidelines","text":""},{"location":"development/coding-guidelines/#api-documentation","title":"API documentation","text":"<ul> <li>Every public function needs docstrings</li> <li>Include usage examples</li> <li>Document parameters and return values</li> <li>Note any exceptions that might be raised</li> </ul>"},{"location":"development/coding-guidelines/#user-documentation","title":"User documentation","text":"<ul> <li>Write for different skill levels</li> <li>Include practical examples</li> <li>Use consistent terminology</li> <li>Keep examples up to date</li> </ul>"},{"location":"development/coding-guidelines/#building-documentation","title":"Building documentation","text":"<pre><code># Install documentation dependencies\npoetry install --with docs\n\n# Serve documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy to GitHub pages (maintainers only)\nmkdocs gh-deploy\n</code></pre>"},{"location":"development/coding-guidelines/#performance-considerations","title":"Performance considerations","text":""},{"location":"development/coding-guidelines/#benchmarking","title":"Benchmarking","text":"<p>When making performance-related changes:</p> <pre><code>import time\nfrom noah123d import STLConverter\n\ndef benchmark_conversion():\n    converter = STLConverter()\n    start_time = time.time()\n\n    # Your code here\n    success = converter.convert(\"large_model.stl\", \"output.3mf\")\n\n    end_time = time.time()\n    print(f\"Conversion took {end_time - start_time:.2f} seconds\")\n</code></pre>"},{"location":"development/coding-guidelines/#memory-usage","title":"Memory usage","text":"<p>Monitor memory usage for large operations:</p> <pre><code>import psutil\nimport os\n\ndef check_memory():\n    process = psutil.Process(os.getpid())\n    memory_mb = process.memory_info().rss / 1024 / 1024\n    print(f\"Memory usage: {memory_mb:.1f} MB\")\n</code></pre>"},{"location":"development/colorful-behave-output/","title":"\ud83c\udfa8 Colorful Output Options for Behave","text":"<p>Yes, there are several excellent ways to get colorful and beautiful output for behave! I've implemented multiple options for you.</p>"},{"location":"development/colorful-behave-output/#available-colorful-output-options","title":"\ud83c\udf08 Available Colorful Output Options","text":""},{"location":"development/colorful-behave-output/#1-built-in-behave-colors-already-configured","title":"1. Built-in Behave Colors \u2705 (Already Configured)","text":"<p>Your <code>behave.ini</code> already has basic color support enabled: <pre><code>color = true\nshow_multiline = true\n</code></pre></p>"},{"location":"development/colorful-behave-output/#2-enhanced-rich-integration-newly-added","title":"2. Enhanced Rich Integration \ud83c\udf89 (Newly Added)","text":"<p>I've enhanced your <code>run_bdd_tests.py</code> script with Rich library for beautiful colored output:</p> <p>Features: - \ud83c\udfa8 Beautiful panel headers with emojis - \ud83d\udcca Colorful command display - \u2705 Success/failure status with icons - \ud83d\uddbc\ufe0f Framed output sections</p> <p>Usage: <pre><code>python run_bdd_tests.py --name=\"Display help information\"\n</code></pre></p>"},{"location":"development/colorful-behave-output/#3-custom-rich-formatter-brand-new","title":"3. Custom Rich Formatter \ud83c\udf1f (Brand New!)","text":"<p>I've created a custom formatter using the Rich library that provides ultra-colorful output:</p> <p>Features: - \ud83c\udfad Colorful feature panels with borders - \ud83c\udfaf Color-coded step keywords (Given=blue, When=yellow, Then=green) - \u2705\u274c Step status icons (\u2705 passed, \u274c failed, \u23ed\ufe0f skipped, \u2753 undefined) - \ud83d\udcca Beautiful summary tables with metrics - \ud83c\udf89 Celebration messages for successful tests - \u23f1\ufe0f Step timing information - \ud83d\udeab Error details in colored panels</p> <p>Usage: <pre><code>python run_bdd_tests.py --rich --name=\"Display help information\"\n# or\npython run_bdd_tests.py --format=rich\n</code></pre></p>"},{"location":"development/colorful-behave-output/#4-allure-html-reports-added","title":"4. Allure HTML Reports \ud83d\udccb (Added)","text":"<p>Beautiful HTML reports with interactive features:</p> <p>Installation: \u2705 Already added <code>allure-behave</code></p> <p>Usage: <pre><code># Generate Allure results\npython run_bdd_tests.py --format=allure\n\n# Generate and serve HTML report (requires allure CLI)\nallure serve allure-results\n</code></pre></p>"},{"location":"development/colorful-behave-output/#visual-comparison","title":"\ud83c\udfaf Visual Comparison","text":""},{"location":"development/colorful-behave-output/#standard-behave-output","title":"Standard Behave Output:","text":"<pre><code>Feature: CLI Basic Functionality\n  Scenario: Display help information\n    Given the noah123d CLI is available ... passed\n    When I run the command with \"--help\" option ... passed\n    Then I should see the help text ... passed\n</code></pre>"},{"location":"development/colorful-behave-output/#rich-formatter-output","title":"Rich Formatter Output:","text":"<pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Feature: CLI Basic Functionality                   \u2502\n\u2502 As a user of noah123d                             \u2502\n\u2502 I want to interact with the command-line interface \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n  Scenario: Display help information\n    \u2705 Given the noah123d CLI is available (0.001s)\n    \u2705 When I run the command with \"--help\" option (0.008s)\n    \u2705 Then I should see the help text (0.000s)\n\n     \ud83e\uddea BDD Test Summary      \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Metric    \u2503 Count \u2503 Status \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Features  \u2502     1 \u2502 \u2705     \u2502\n\u2502 Scenarios \u2502     1 \u2502 \u2705     \u2502\n\u2502 Steps     \u2502     3 \u2502 \u2705     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83c\udf89 All tests passed! \ud83c\udf89\n</code></pre>"},{"location":"development/colorful-behave-output/#usage-examples","title":"\ud83d\ude80 Usage Examples","text":""},{"location":"development/colorful-behave-output/#basic-colorful-output","title":"Basic Colorful Output:","text":"<pre><code># Standard behave with colors\ncd tests_behave &amp;&amp; poetry run behave\n\n# Enhanced run script with Rich panels\npython run_bdd_tests.py\n</code></pre>"},{"location":"development/colorful-behave-output/#ultra-colorful-rich-formatter","title":"Ultra-Colorful Rich Formatter:","text":"<pre><code># Use Rich formatter\npython run_bdd_tests.py --rich\n\n# Rich formatter with specific tests\npython run_bdd_tests.py --rich --name=\"CLI\"\n\n# Rich formatter with tags\npython run_bdd_tests.py --rich --tags=\"not @slow\"\n</code></pre>"},{"location":"development/colorful-behave-output/#html-reports","title":"HTML Reports:","text":"<pre><code># Generate Allure HTML reports\npython run_bdd_tests.py --format=allure\n\n# Custom output directory\npython run_bdd_tests.py --format=allure --allure-results=reports\n</code></pre>"},{"location":"development/colorful-behave-output/#multiple-output-formats","title":"Multiple Output Formats:","text":"<pre><code># Combine with other options\npython run_bdd_tests.py --rich --verbose\npython run_bdd_tests.py --format=json --no-capture\n</code></pre>"},{"location":"development/colorful-behave-output/#color-coding-system","title":"\ud83c\udfa8 Color Coding System","text":""},{"location":"development/colorful-behave-output/#step-keywords","title":"Step Keywords:","text":"<ul> <li>\ud83d\udd35 Given - Blue (setup/preconditions)</li> <li>\ud83d\udfe1 When - Yellow (actions/events)  </li> <li>\ud83d\udfe2 Then - Green (assertions/outcomes)</li> <li>\u26aa And/But - White (continuation)</li> </ul>"},{"location":"development/colorful-behave-output/#step-status","title":"Step Status:","text":"<ul> <li>\u2705 Passed - Green with checkmark</li> <li>\u274c Failed - Red with X mark</li> <li>\u23ed\ufe0f Skipped - Yellow with skip icon</li> <li>\u2753 Undefined - Magenta with question mark</li> <li>\u23f8\ufe0f Pending - White with pause icon</li> </ul>"},{"location":"development/colorful-behave-output/#summary-elements","title":"Summary Elements:","text":"<ul> <li>\ud83e\uddea Test metrics table</li> <li>\ud83c\udf89 Success celebrations  </li> <li>\ud83d\udcca Colorful progress indicators</li> <li>\ud83d\uddbc\ufe0f Bordered panels and sections</li> </ul>"},{"location":"development/colorful-behave-output/#rich-formatter-features","title":"\ud83d\udcca Rich Formatter Features","text":""},{"location":"development/colorful-behave-output/#feature-panels","title":"Feature Panels:","text":"<pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Feature: CLI Basic Functionality                   \u2502\n\u2502 As a user of noah123d                             \u2502\n\u2502 I want to interact with the command-line interface \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"development/colorful-behave-output/#step-execution","title":"Step Execution:","text":"<pre><code>\u2705 Given the noah123d CLI is available (0.001s)\n\u2705 When I run the command with \"--help\" option (0.008s)  \n\u2705 Then I should see the help text (0.000s)\n</code></pre>"},{"location":"development/colorful-behave-output/#error-details","title":"Error Details:","text":"<pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Error Details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 AssertionError: Expected 'help' not \u2502\n\u2502 found in output                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"development/colorful-behave-output/#summary-table","title":"Summary Table:","text":"<pre><code>     \ud83e\uddea BDD Test Summary      \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Metric    \u2503 Count \u2503 Status \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Features  \u2502     3 \u2502 \u2705     \u2502\n\u2502 Scenarios \u2502     5 \u2502 \u2705     \u2502\n\u2502 Steps     \u2502    15 \u2502 \u2705     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/colorful-behave-output/#configuration-options","title":"\u2699\ufe0f Configuration Options","text":""},{"location":"development/colorful-behave-output/#behaveini-enhancements","title":"behave.ini Enhancements:","text":"<pre><code>[behave]\n# Enhanced colors and formatting\ncolor = true\nshow_multiline = true\nshow_source = true\nshow_timings = true\n\n# Multiple formatters (uncomment as needed)\n# format = pretty\n# format = formatters.rich_formatter:RichFormatter\n# format = allure_behave.formatter:AllureFormatter\n</code></pre>"},{"location":"development/colorful-behave-output/#command-line-options","title":"Command Line Options:","text":"<pre><code># Disable colors (if needed)\npython run_bdd_tests.py --no-color\n\n# Different formats\npython run_bdd_tests.py --format=json     # JSON output\npython run_bdd_tests.py --format=junit    # JUnit XML\npython run_bdd_tests.py --format=allure   # Allure reports\npython run_bdd_tests.py --format=rich     # Rich formatter\n</code></pre>"},{"location":"development/colorful-behave-output/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"development/colorful-behave-output/#for-development","title":"For Development:","text":"<ul> <li>Use <code>--rich</code> for detailed, colorful output during development</li> <li>Add <code>--verbose</code> for extra detail when debugging</li> <li>Use <code>--no-capture</code> to see print statements</li> </ul>"},{"location":"development/colorful-behave-output/#for-cicd","title":"For CI/CD:","text":"<ul> <li>Use standard <code>pretty</code> format for readable logs</li> <li>Generate <code>allure</code> or <code>junit</code> reports for integration</li> <li>Use <code>--no-color</code> in CI environments that don't support colors</li> </ul>"},{"location":"development/colorful-behave-output/#for-demos","title":"For Demos:","text":"<ul> <li>Use <code>--rich</code> for impressive, colorful presentations</li> <li>Add <code>--show-timings</code> to display performance metrics</li> <li>Use specific <code>--name</code> or <code>--tags</code> to focus on key scenarios</li> </ul>"},{"location":"development/colorful-behave-output/#recommendation","title":"\ud83c\udfc6 Recommendation","text":"<p>For daily development: Use <code>python run_bdd_tests.py --rich</code> for the best visual experience!</p> <p>The Rich formatter provides: - \u2728 Beautiful, professional-looking output - \ud83c\udfaf Clear visual hierarchy and organization - \ud83d\udcca Comprehensive metrics and summaries - \ud83c\udf89 Engaging success celebrations - \ud83d\udea8 Clear error highlighting and details</p> <p>This makes BDD testing not just functional, but visually appealing and enjoyable! \ud83c\udf1f</p>"},{"location":"development/communication/","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Questions and general discussion</li> <li>Pull Requests: Code review and development discussion</li> </ul>"},{"location":"development/communication/#code-of-conduct","title":"Code of conduct","text":"<p>We follow the Contributor Covenant. Be respectful, inclusive, and professional in all interactions.</p>"},{"location":"development/context-aware-refactoring/","title":"Context-Aware Model Class Refactoring","text":""},{"location":"development/context-aware-refactoring/#overview","title":"Overview","text":"<p>The Model class has been refactored to properly use the existing Archive3mf and Directory context system instead of creating its own contexts within class methods. This improves architecture consistency and follows the library's design patterns.</p>"},{"location":"development/context-aware-refactoring/#changes-made","title":"Changes Made","text":""},{"location":"development/context-aware-refactoring/#1-new-instance-methods-context-aware","title":"1. New Instance Methods (Context-Aware)","text":"<p>These methods work within existing Archive3mf and Directory contexts:</p> <ul> <li><code>load_stl_with_info(stl_path)</code> - Load STL with rich console output</li> <li><code>analyze_model_content()</code> - Analyze and display model statistics </li> <li><code>add_conversion_metadata(stl_path)</code> - Add metadata to current archive context</li> </ul>"},{"location":"development/context-aware-refactoring/#2-refactored-class-methods","title":"2. Refactored Class Methods","text":"<p>Updated existing class methods to properly use the context system:</p> <ul> <li><code>convert_stl_to_3mf()</code> - Now uses proper Archive3mf \u2192 Directory \u2192 Model context chain</li> <li><code>analyze_3mf_content()</code> - Uses context system and delegates to instance method</li> <li><code>batch_convert_stl_files()</code> - Already correct, uses convert_stl_to_3mf()</li> </ul>"},{"location":"development/context-aware-refactoring/#usage-patterns","title":"Usage Patterns","text":""},{"location":"development/context-aware-refactoring/#pattern-1-class-methods-self-contained","title":"Pattern 1: Class Methods (Self-Contained)","text":"<pre><code># Handles all context creation internally\nModel.convert_stl_to_3mf(Path(\"input.stl\"), Path(\"output.3mf\"))\nModel.analyze_3mf_content(Path(\"output.3mf\"))\n</code></pre>"},{"location":"development/context-aware-refactoring/#pattern-2-instance-methods-context-aware","title":"Pattern 2: Instance Methods (Context-Aware)","text":"<pre><code># Work within existing contexts\nwith Archive3mf('output.3mf', 'w') as archive:\n    with Directory('3D') as models_dir:\n        with Model() as model:\n            obj_id = model.load_stl_with_info(Path('model.stl'))\n            model.analyze_model_content()\n            model.add_conversion_metadata(Path('model.stl'))\n</code></pre>"},{"location":"development/context-aware-refactoring/#pattern-3-advanced-multi-model-usage","title":"Pattern 3: Advanced Multi-Model Usage","text":"<pre><code>with Archive3mf('assembly.3mf', 'w') as archive:\n    with Directory('3D') as models_dir:\n        # Multiple models in same archive\n        with Model('part1.model') as model1:\n            model1.load_stl_with_info(Path('part1.stl'))\n\n        with Model('part2.model') as model2:\n            model2.load_stl_with_info(Path('part2.stl'))\n</code></pre>"},{"location":"development/context-aware-refactoring/#benefits","title":"Benefits","text":"<p>\u2705 Proper Context Management - No duplicate context creation or resource leaks \u2705 Architecture Consistency - Follows established Archive3mf \u2192 Directory \u2192 Model pattern \u2705 Flexibility - Can work within existing contexts or create new ones \u2705 Single Responsibility - Class methods handle high-level operations, instance methods handle model operations \u2705 Maintainability - Clear separation between context creation and model manipulation \u2705 Extensibility - Easy to add new context-aware methods</p>"},{"location":"development/context-aware-refactoring/#files-updated","title":"Files Updated","text":"<ul> <li><code>noah123d/model.py</code> - Added context-aware methods and refactored existing ones</li> <li><code>examples/example_simple_conversion.py</code> - Updated to show both usage patterns</li> <li><code>examples/context_aware_demo.py</code> - New demo showing context-aware usage</li> <li><code>examples/model_class_demo.py</code> - Updated documentation</li> </ul>"},{"location":"development/context-aware-refactoring/#migration-guide","title":"Migration Guide","text":""},{"location":"development/context-aware-refactoring/#before-anti-pattern","title":"Before (Anti-pattern)","text":"<pre><code># Methods created their own contexts internally\nModel.convert_stl_to_3mf(stl_path, output_path)\n</code></pre>"},{"location":"development/context-aware-refactoring/#after-recommended","title":"After (Recommended)","text":"<pre><code># Option 1: Class methods (unchanged API)\nModel.convert_stl_to_3mf(stl_path, output_path)\n\n# Option 2: Context-aware (new capability)\nwith Archive3mf(output_path, 'w') as archive:\n    with Directory('3D') as models_dir:\n        with Model() as model:\n            model.load_stl_with_info(stl_path)\n</code></pre> <p>The refactoring maintains backward compatibility while adding new context-aware capabilities for advanced users.</p>"},{"location":"development/contributing/","title":"Contributing to Noah123d","text":"<p>Thank you for your interest in contributing to <code>noah123d</code>! This document provides guidelines for contributing to the project.</p>"},{"location":"development/contributing/#introduction","title":"Introduction","text":""},{"location":"development/contributing/#definition","title":"Definition","text":"<p>Contribution is the act of implementing features added to a release of the package. Multiple bug-fixes, extensive documentation and extensions of tests over a longer period of time will be deemed the same as implementing new features.</p>"},{"location":"development/contributing/#process","title":"Process","text":"<p>Before you commit of implementing a new feature be sure that the authors understand the purpose of the feature and had the opportunity to understand the integration into the package.</p> <p>Please be aware that the maintenance of more complex features or dependencies to other packages might be the reason, why the authors hesitate to accept your contribution.  Remember that it is always an option to create you own package on top of this package to share your great ideas with the world, as we did with <code>noah123d</code>. It is also possible and likely that parts of the library will be integrated into <code>build123d</code> as the authors of this package deem them to fit into their toolset. </p>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in: - <code>CONTRIBUTORS.md</code> file - Release notes - Documentation acknowledgments</p>"},{"location":"development/contributing/#getting-started","title":"Getting started","text":""},{"location":"development/contributing/#contribution-and-licensing","title":"Contribution and licensing","text":"<ul> <li>This project is an open source project developed under the MIT License - your work will therefore be under the same license as long as it is part of this package.</li> </ul> <p>[!Note] If you think you contributed much to this package, feel free to contact the owners to name you as one of the authors. </p> <p>[!Important] Licensing is done by the owner on a release bases and may change during the process of development, if you contributed to the project you will be informed about any license change and will automatically get a at least 3 year usage of the package without any restrictions. If you do not agree with this possibility please do not contribute to the project but fork it.</p> <p>If you have any further questions, feel free to raise an issue or join our discussions on opened issues on GitHub.</p>"},{"location":"development/contributing/#development-setup","title":"Development setup","text":"<p>[!Note] You will need a free github accout for contributing</p> <ol> <li>Fork the repository:</li> <li>Go to the Noah123d GitHub page and click on the \"Fork\" button.</li> <li>Clone the repository:    <pre><code>git clone https://github.com/{your-accont}/noah123d.git\ncd noah123d\n</code></pre></li> <li>Install Poetry (if not already installed):    <pre><code>curl -sSL https://install.python-poetry.org | python -\nwhich poetry\npoetry --version\n</code></pre>    You should see a version output of <code>&gt;2.0.0</code></li> <li>Install dependencies:    <pre><code>poetry install --with dev,docs\n</code></pre></li> <li>Activate the virtual environment:    <pre><code>poetry self add poetry-plugin-shell\npoetry shell\n</code></pre></li> <li>Run tests to verify setup:    <pre><code>pytest\n</code></pre></li> </ol>"},{"location":"development/contributing/#development-environment","title":"Development environment","text":"<p>We recommend using VS Code with these extensions: - Python - Pylance - Python Docstring Generator</p>"},{"location":"development/contributing/#types-of-contributions","title":"Types of contributions","text":""},{"location":"development/contributing/#documentation-updates","title":"Documentation updates","text":"<p>Documentation improvements are always welcome: - Fix typos or unclear explanations - Add examples or use cases - Improve API documentation - Translate documentation (future)</p>"},{"location":"development/contributing/#code-contributions-new-features-and-bug-fixes","title":"Code contributions (new features and bug fixes)","text":""},{"location":"development/contributing/#development-workflow","title":"Development workflow","text":""},{"location":"development/contributing/#1-create-a-branch","title":"1. create a branch","text":"<pre><code>git checkout -b feature/your-feature-name\n# Or\ngit checkout -b fix/issue-number-description\n</code></pre>"},{"location":"development/contributing/#2-make-changes","title":"2. make changes","text":"<ul> <li>Follow the coding standards</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> <li>Keep commits small and focused</li> </ul>"},{"location":"development/contributing/#3-test-changes","title":"3. test changes","text":"<p>Run the full test suite:</p> <pre><code># Run all tests\npytest\n\n# Run tests with coverage\npytest --cov=noah123d\n\n# Run specific test file\npytest tests/test_converters.py\n\n# Run tests in verbose mode\npytest -v\n</code></pre>"},{"location":"development/contributing/#4-documentation","title":"4. documentation","text":"<p>Build and test documentation:</p> <pre><code># Install docs dependencies\npoetry install --with docs\n\n# Serve docs locally\nmkdocs serve\n\n# Build docs\nmkdocs build\n</code></pre>"},{"location":"development/contributing/#5-submit-pull-request","title":"5. submit pull request","text":"<ol> <li>Push your branch to your fork</li> <li>Create a pull request with:</li> <li>Clear title and description</li> <li>Reference to related issues</li> <li>Description of changes made</li> <li>Any breaking changes noted</li> </ol>"},{"location":"development/help/","title":"Help","text":""},{"location":"development/help/#getting-help","title":"Getting help","text":"<p>If you need help:</p> <ol> <li>Check existing documentation</li> <li>Search closed issues</li> <li>Ask in GitHub discussions</li> <li>Create a new issue if needed</li> </ol>"},{"location":"development/pytest-bdd-integration/","title":"Behave vs pytest-bdd Integration Comparison","text":""},{"location":"development/pytest-bdd-integration/#overview","title":"\ud83d\udcca Overview","text":"<p>Yes, there are excellent plugins and packages that integrate BDD testing with pytest! The most popular and mature solution is pytest-bdd, which I've just added to your project alongside your existing behave setup.</p>"},{"location":"development/pytest-bdd-integration/#integration-options","title":"\ud83d\udd04 Integration Options","text":""},{"location":"development/pytest-bdd-integration/#1-pytest-bdd-package-recommended","title":"1. pytest-bdd Package \u2b50 (Recommended)","text":"<p>What it is: A pytest plugin that allows you to use Gherkin feature files directly with pytest.</p> <p>Latest version installed: <code>8.1.0</code></p> <p>Key advantages: - \u2705 Uses identical Gherkin syntax to behave - \u2705 Leverages pytest fixtures, plugins, and ecosystem - \u2705 Better IDE integration and debugging support - \u2705 More active development and larger community - \u2705 Seamless integration with existing pytest tests - \u2705 Superior reporting and test discovery</p>"},{"location":"development/pytest-bdd-integration/#2-vs-code-extension-support","title":"2. VS Code Extension Support","text":"<p>Installed: <code>Pytest BDD Navigator</code> - Enhanced navigation between pytest-bdd tests and feature files</p>"},{"location":"development/pytest-bdd-integration/#detailed-comparison","title":"\ud83c\udd9a Detailed Comparison","text":"Feature behave pytest-bdd Gherkin Support \u2705 Full \u2705 Full Pytest Integration \u274c Separate \u2705 Native Fixtures Custom context \u2705 Pytest fixtures Plugins Limited \u2705 Full pytest ecosystem IDE Support Basic \u2705 Excellent Debugging Limited \u2705 Full pytest debugging Reporting Basic HTML/JSON \u2705 Rich pytest reporting Parallel Execution Plugin required \u2705 Built-in with pytest-xdist Test Discovery Custom \u2705 Pytest discovery Community Smaller \u2705 Larger (pytest ecosystem)"},{"location":"development/pytest-bdd-integration/#current-project-structure","title":"\ud83c\udfd7\ufe0f Current Project Structure","text":"<p>You now have both approaches available:</p> <pre><code>noah123d/\n\u251c\u2500\u2500 tests/                    # Unit tests (pytest)\n\u251c\u2500\u2500 tests_behave/            # BDD tests (behave)\n\u2514\u2500\u2500 tests_pytest_bdd/        # BDD tests (pytest-bdd)\n    \u251c\u2500\u2500 conftest.py          # Pytest configuration\n    \u251c\u2500\u2500 features/\n    \u2502   \u2514\u2500\u2500 cli_operations.feature\n    \u2514\u2500\u2500 test_cli_operations.py  # Step definitions\n</code></pre>"},{"location":"development/pytest-bdd-integration/#feature-file-comparison","title":"\ud83d\udcdd Feature File Comparison","text":""},{"location":"development/pytest-bdd-integration/#behave-feature-file","title":"behave Feature File:","text":"<pre><code>Feature: CLI Basic Functionality\n  Background:\n    Given the noah123d CLI is available\n\n  Scenario: Display help information\n    When I run the command with \"--help\" option\n    Then I should see the help text\n</code></pre>"},{"location":"development/pytest-bdd-integration/#pytest-bdd-feature-file","title":"pytest-bdd Feature File:","text":"<pre><code>Feature: CLI Basic Operations (pytest-bdd version)\n  Scenario: Display help information\n    When I run noah123d with \"--help\" option\n    Then I should see the help message\n</code></pre> <p>Note: Identical Gherkin syntax, minimal differences</p>"},{"location":"development/pytest-bdd-integration/#step-definition-comparison","title":"\ud83d\udd27 Step Definition Comparison","text":""},{"location":"development/pytest-bdd-integration/#behave-step-definition","title":"behave Step Definition:","text":"<pre><code>@when('I run the command with \"{option}\" option')\ndef step_run_command_with_option(context, option):\n    context.runner = CliRunner()\n    context.command_result = context.runner.invoke(main, [option])\n</code></pre>"},{"location":"development/pytest-bdd-integration/#pytest-bdd-step-definition","title":"pytest-bdd Step Definition:","text":"<pre><code>@when(parsers.parse('I run noah123d with \"{option}\" option'))\ndef run_noah123d_with_option(cli_runner, command_result, option):\n    result = cli_runner.invoke(main, [option])\n    command_result['result'] = result\n</code></pre> <p>Key Differences: - pytest-bdd uses pytest fixtures instead of context object - pytest-bdd leverages dependency injection through fixtures - pytest-bdd integrates with pytest's assertion system</p>"},{"location":"development/pytest-bdd-integration/#running-tests-comparison","title":"\ud83d\ude80 Running Tests Comparison","text":""},{"location":"development/pytest-bdd-integration/#behave-tests","title":"behave Tests:","text":"<pre><code># Run behave tests\ncd tests_behave &amp;&amp; poetry run behave\n\n# Run with tags\npoetry run behave --tags=\"not @slow\"\n</code></pre>"},{"location":"development/pytest-bdd-integration/#pytest-bdd-tests","title":"pytest-bdd Tests:","text":"<pre><code># Run pytest-bdd tests\npoetry run pytest tests_pytest_bdd/ -v\n\n# Run with pytest features\npoetry run pytest tests_pytest_bdd/ -v --tb=short\npoetry run pytest tests_pytest_bdd/ -k \"help\"\n</code></pre>"},{"location":"development/pytest-bdd-integration/#test-results","title":"\ud83d\udcca Test Results","text":""},{"location":"development/pytest-bdd-integration/#current-pytest-bdd-results","title":"Current pytest-bdd Results:","text":"<pre><code>====================================== test session starts ======================================\nplatform win32 -- Python 3.12.8, pytest-8.4.1, pluggy-1.6.0\nplugins: bdd-8.1.0\ncollected 3 items\n\ntests_pytest_bdd/test_cli_operations.py::test_display_help_information PASSED           [ 33%]\ntests_pytest_bdd/test_cli_operations.py::test_display_version_information PASSED       [ 66%]\ntests_pytest_bdd/test_cli_operations.py::test_run_with_no_arguments_shows_guidance PASSED [100%]\n\n======================================= 3 passed in 0.75s =======================================\n</code></pre>"},{"location":"development/pytest-bdd-integration/#recommendations","title":"\ud83c\udfaf Recommendations","text":""},{"location":"development/pytest-bdd-integration/#option-a-gradual-migration-recommended","title":"Option A: Gradual Migration \u2b50 (Recommended)","text":"<ol> <li>Keep existing behave tests for current functionality</li> <li>Use pytest-bdd for new features going forward</li> <li>Gradually migrate high-value tests to pytest-bdd</li> <li>Leverage pytest ecosystem benefits</li> </ol>"},{"location":"development/pytest-bdd-integration/#option-b-dual-approach","title":"Option B: Dual Approach","text":"<ol> <li>Use behave for pure BDD scenarios and stakeholder communication</li> <li>Use pytest-bdd for developer-focused BDD tests</li> <li>Run both in CI/CD pipeline</li> </ol>"},{"location":"development/pytest-bdd-integration/#option-c-full-migration","title":"Option C: Full Migration","text":"<ol> <li>Convert feature files (minimal changes needed)</li> <li>Rewrite step definitions to use pytest-bdd patterns</li> <li>Gain full pytest integration benefits</li> </ol>"},{"location":"development/pytest-bdd-integration/#migration-example","title":"\ud83d\udd0d Migration Example","text":"<p>If you choose to migrate, here's how a behave test converts to pytest-bdd:</p>"},{"location":"development/pytest-bdd-integration/#behave-version","title":"behave Version:","text":"<pre><code># features/environment.py\ndef before_all(context):\n    context.temp_dir = Path(tempfile.mkdtemp())\n\n# steps/cli_steps.py\n@given('the noah123d CLI is available')\ndef step_cli_available(context):\n    context.runner = CliRunner()\n</code></pre>"},{"location":"development/pytest-bdd-integration/#pytest-bdd-version","title":"pytest-bdd Version:","text":"<pre><code># conftest.py\n@pytest.fixture(scope=\"session\")\ndef temp_test_dir():\n    temp_dir = Path(tempfile.mkdtemp())\n    yield temp_dir\n    shutil.rmtree(temp_dir)\n\n# test_cli.py\n@pytest.fixture\ndef cli_runner():\n    return CliRunner()\n</code></pre>"},{"location":"development/pytest-bdd-integration/#benefits-of-pytest-bdd-integration","title":"\ud83d\udcc8 Benefits of pytest-bdd Integration","text":""},{"location":"development/pytest-bdd-integration/#development-benefits","title":"Development Benefits:","text":"<ul> <li>Single test runner: <code>pytest</code> for both unit and BDD tests</li> <li>Unified reporting: All test results in one place</li> <li>Better debugging: Full pytest debugging capabilities</li> <li>IDE integration: Better VS Code support and IntelliSense</li> </ul>"},{"location":"development/pytest-bdd-integration/#cicd-benefits","title":"CI/CD Benefits:","text":"<ul> <li>Consistent tooling: Same test runner for all test types</li> <li>Rich reporting: JUnit XML, HTML reports, coverage integration</li> <li>Parallel execution: Built-in with pytest-xdist</li> <li>Plugin ecosystem: Access to hundreds of pytest plugins</li> </ul>"},{"location":"development/pytest-bdd-integration/#team-benefits","title":"Team Benefits:","text":"<ul> <li>Learning curve: Developers already know pytest</li> <li>Maintenance: Fewer tools to maintain and configure</li> <li>Consistency: Same patterns for fixtures, mocking, parametrization</li> </ul>"},{"location":"development/pytest-bdd-integration/#conclusion","title":"\ud83c\udf89 Conclusion","text":"<p>pytest-bdd provides excellent integration between BDD and pytest, offering the best of both worlds: - Gherkin syntax for stakeholder communication - pytest ecosystem for developer productivity - Unified tooling for simplified workflows</p> <p>Your project now has both options available, allowing you to choose the best approach for each use case or gradually migrate to the more integrated solution.</p>"},{"location":"development/pytest-bdd-integration/#next-steps","title":"\ud83d\udd17 Next Steps","text":"<ol> <li>Explore pytest-bdd features with the example I've created</li> <li>Compare development experience between both approaches  </li> <li>Decide on migration strategy based on team preferences</li> <li>Leverage VS Code extensions for better BDD development experience</li> </ol> <p>The Pytest BDD Navigator extension I've installed will help you navigate between feature files and step definitions seamlessly!</p>"},{"location":"development/release-process/","title":"Release process","text":""},{"location":"development/release-process/#release-process","title":"Release process","text":""},{"location":"development/release-process/#versioning","title":"Versioning","text":"<p>Noah123d uses Calendar Versioning (CalVer): - Format: <code>YYYY.MINOR.PATCH</code> - Example: <code>2025.1.0</code></p>"},{"location":"development/release-process/#release-checklist","title":"Release checklist","text":"<p>For maintainers:</p> <ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>changelog.md</code></li> <li>Run full test suite</li> <li>Build and test documentation</li> <li>Create release tag</li> <li>Deploy to PyPI</li> <li>Update GitHub release</li> </ol>"},{"location":"examples/advanced-usage/","title":"Advanced usage of Noah123d","text":""},{"location":"examples/grid-layouts/","title":"Grid layout feature documentation","text":""},{"location":"examples/grid-layouts/#overview","title":"Overview","text":"<p>The Noah123d STL converter now supports creating grid layouts with multiple copies of the same object. This feature automatically calculates spacing based on the object's dimensions to prevent overlapping and creates perfectly arranged grids for 3D printing.</p>"},{"location":"examples/grid-layouts/#new-features-added","title":"New features added","text":""},{"location":"examples/grid-layouts/#grid-layout-functions","title":"\ud83d\udd32 grid layout functions","text":""},{"location":"examples/grid-layouts/#stl_to_3mf_grid","title":"<code>stl_to_3mf_grid()</code>","text":"<p>Simple function for creating grid layouts:</p> <pre><code>from noah123d import stl_to_3mf_grid\n\n# Create a 2x2 grid with 4 copies\nsuccess = stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\", \n    count=4,\n    grid_cols=2,\n    spacing_factor=1.2,  # 20% spacing between parts\n    center_grid=True\n)\n</code></pre>"},{"location":"examples/grid-layouts/#stlconverterconvert_with_copies","title":"<code>STLConverter.convert_with_copies()</code>","text":"<p>Advanced method for grid conversion with detailed control:</p> <pre><code>from noah123d import STLConverter\n\nconverter = STLConverter(include_metadata=True)\nsuccess = converter.convert_with_copies(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\",\n    count=9,\n    grid_cols=3,\n    spacing_factor=1.1,\n    center_grid=True\n)\n\n# Get detailed statistics\nstats = converter.get_conversion_stats()\n</code></pre>"},{"location":"examples/grid-layouts/#parameters","title":"Parameters","text":""},{"location":"examples/grid-layouts/#core-parameters","title":"Core parameters","text":"<ul> <li><code>count</code>: Total number of copies to create</li> <li><code>grid_cols</code>: Number of columns (auto-calculated if None)</li> <li><code>spacing_factor</code>: Spacing multiplier (1.0 = touching, 1.1 = 10% gap)</li> <li><code>center_grid</code>: Center the grid around origin (default: True)</li> </ul>"},{"location":"examples/grid-layouts/#spacing-factor-examples","title":"Spacing factor examples","text":"<ul> <li><code>1.0</code> - Objects touching (no gap)</li> <li><code>1.1</code> - 10% spacing (recommended minimum)</li> <li><code>1.2</code> - 20% spacing (good for most prints)</li> <li><code>1.5</code> - 50% spacing (wide spacing)</li> </ul>"},{"location":"examples/grid-layouts/#grid-layout-logic","title":"Grid layout logic","text":"<p>The system automatically:</p> <ol> <li>Calculates object Dimensions: Analyzes STL bounding box</li> <li>Determines grid Layout: Optimal rows\u00d7columns for given count</li> <li>Computes Spacing: Based on object size and spacing factor</li> <li>Positions Objects: Places copies without overlapping</li> <li>Centers Grid: Optional centering around origin</li> </ol>"},{"location":"examples/grid-layouts/#auto-layout-examples","title":"Auto-Layout examples","text":"<ul> <li>4 copies \u2192 2\u00d72 grid</li> <li>6 copies \u2192 3\u00d72 grid  </li> <li>9 copies \u2192 3\u00d73 grid</li> <li>12 copies \u2192 4\u00d73 grid</li> </ul>"},{"location":"examples/grid-layouts/#usage-examples","title":"Usage examples","text":""},{"location":"examples/grid-layouts/#example-1-simple-22-grid","title":"Example 1: Simple 2\u00d72 grid","text":"<pre><code>from noah123d import stl_to_3mf_grid\n\n# Create 4 copies in a 2x2 grid with 20% spacing\nstl_to_3mf_grid(\"part.stl\", \"quad.3mf\", count=4, grid_cols=2, spacing_factor=1.2)\n</code></pre>"},{"location":"examples/grid-layouts/#example-2-single-row-layout","title":"Example 2: Single row layout","text":"<pre><code># Create 5 copies in a single row\nstl_to_3mf_grid(\"part.stl\", \"row.3mf\", count=5, grid_cols=5, spacing_factor=1.5)\n</code></pre>"},{"location":"examples/grid-layouts/#example-3-auto-layout","title":"Example 3: Auto-layout","text":"<pre><code># Let the system choose optimal layout for 6 copies\nstl_to_3mf_grid(\"part.stl\", \"auto.3mf\", count=6, spacing_factor=1.1)\n</code></pre>"},{"location":"examples/grid-layouts/#example-4-advanced-control","title":"Example 4: Advanced control","text":"<pre><code>from noah123d import STLConverter\n\nconverter = STLConverter(include_metadata=True, validate=True)\n\n# Create custom grid with detailed statistics\nsuccess = converter.convert_with_copies(\n    stl_path=\"complex_part.stl\",\n    output_path=\"production_grid.3mf\",\n    count=12,\n    grid_cols=4,  # 4\u00d73 grid\n    spacing_factor=1.15,\n    center_grid=True\n)\n\nif success:\n    stats = converter.get_conversion_stats()\n    print(f\"Created {stats['copies']} objects\")\n    print(f\"Grid layout: {stats['grid_layout']}\")\n    print(f\"Total triangles: {stats['triangles']:,}\")\n</code></pre>"},{"location":"examples/grid-layouts/#output-files","title":"Output files","text":"<p>Grid conversion creates 3MF files with:</p> <ul> <li>\u2705 Multiple Objects: Each copy as separate object</li> <li>\u2705 Proper Positioning: No overlapping, optimal spacing  </li> <li>\u2705 Grid Metadata: Detailed conversion report</li> <li>\u2705 Build Items: All objects included in build plate</li> </ul>"},{"location":"examples/grid-layouts/#metadata-information","title":"Metadata information","text":"<p>The generated 3MF includes metadata with: - Grid configuration (rows\u00d7columns) - Spacing factor used - Object positions (X, Y, Z coordinates) - Performance statistics - Conversion details</p>"},{"location":"examples/grid-layouts/#performance","title":"Performance","text":"<p>Grid conversion performance: - ~80,000 triangles/second for grid operations - Efficient memory usage (reuses geometry) - Fast positioning calculations - Scales well with object count</p>"},{"location":"examples/grid-layouts/#test-results","title":"Test results","text":"<p>Based on tile_2x2_borde.stl (33,448 triangles):</p> Grid Size Objects Total Triangles File Size Time 2\u00d72 4 133,792 2.6 MB 3.6s 3\u00d73 9 301,032 5.9 MB - 4\u00d73 12 401,376 7.8 MB 3.1s"},{"location":"examples/grid-layouts/#applications","title":"Applications","text":"<p>Perfect for: - 3D Printing Arrays: Multiple small parts on one print bed - Production Runs: Batch manufacturing layouts - Assembly Kits: Organized part arrangements - Prototyping: Quick test arrays with different spacings</p>"},{"location":"examples/grid-layouts/#file-examples","title":"File examples","text":"<p>Run the examples to see the grid functionality:</p> <pre><code># Test all grid layouts\npython examples/example_grid_layout.py\n\n# Creates files like:\n# - grid_2x2.3mf (2\u00d72 grid)\n# - grid_3x3.3mf (3\u00d73 grid) \n# - grid_1x5.3mf (single row)\n# - advanced_*.3mf (custom configurations)\n</code></pre>"},{"location":"examples/grid-layouts/#integration","title":"Integration","text":"<p>The grid feature integrates seamlessly with existing noah123d workflow:</p> <ol> <li>STL Analysis: Uses existing <code>get_stl_info()</code> for dimensions</li> <li>3MF Creation: Uses <code>Archive3mf</code>, <code>Directory</code>, <code>model</code> classes</li> <li>Object Management: Leverages existing object handling</li> <li>Metadata: Enhanced metadata with grid information</li> </ol> <p>This provides a complete solution from single STL files to production-ready grid layouts! \ud83c\udfaf</p>"},{"location":"examples/simple-conversion/","title":"Example simple STL to 3MF conversion","text":""},{"location":"examples/simple-conversion/#examples.example_simple_conversion","title":"examples.example_simple_conversion","text":"<p>Example usage of STL to 3MF converter using the noah123d library with context-aware methods.</p>"},{"location":"examples/simple-conversion/#examples.example_simple_conversion.demo_context_aware_conversion","title":"demo_context_aware_conversion","text":"<pre><code>demo_context_aware_conversion()\n</code></pre> <p>Demo using instance methods within proper context.</p> Source code in <code>examples/example_simple_conversion.py</code> <pre><code>def demo_context_aware_conversion():\n    \"\"\"Demo using instance methods within proper context.\"\"\"\n    console = Console()\n    console.print(\"\\n[yellow]Demo: Context-aware conversion (instance methods)[/yellow]\")\n\n    stl_path = Path(\"_models/multiverse/tile_2x2_borde.stl\")\n    output_path = Path(\"context_aware_tile.3mf\")\n\n    if not stl_path.exists():\n        console.print(f\"[red]STL file not found: {stl_path}[/red]\")\n        return None\n\n    console.print(f\"[green]Converting using context-aware methods...[/green]\")\n\n    # Use the context system properly - Archive3mf -&gt; Directory -&gt; Model\n    with Archive3mf(output_path, 'w') as archive:\n        console.print(f\"\u2713 Created 3MF archive: {archive.file_path}\")\n\n        with Directory('3D') as models_dir:\n            console.print(f\"\u2713 Created 3D models directory\")\n\n            with Model() as model:\n                # Use the new instance method\n                obj_id = model.load_stl_with_info(stl_path)\n                if obj_id:\n                    # Add conversion metadata using instance method\n                    model.add_conversion_metadata(stl_path)\n                    console.print(f\"\u2713 Added object with ID: {obj_id}\")\n\n    console.print(f\"[bold green]\u2705 Context-aware conversion completed![/bold green]\")\n    return output_path\n</code></pre>"},{"location":"examples/text-editor/","title":"3MF text editor","text":"<p>A powerful utility for modifying text content in 3MF files. This tool allows you to edit text strings stored in slicer metadata, such as object names and embedded text elements created by CAD software or slicers like PrusaSlicer.</p>"},{"location":"examples/text-editor/#overview","title":"Overview","text":"<p>The 3MF Text Editor can modify text strings that are stored as metadata in 3MF files. This is particularly useful for:</p> <ul> <li>Changing object names that appear in slicer software</li> <li>Modifying embedded text created by CAD programs</li> <li>Customizing text elements for different languages or purposes</li> <li>Batch processing of 3MF files with text content</li> </ul>"},{"location":"examples/text-editor/#features","title":"Features","text":"<ul> <li>\u2705 List Text Content: Display all modifiable text in a 3MF file</li> <li>\u2705 Single Text Replacement: Replace one text string with another</li> <li>\u2705 Interactive Mode: Replace multiple text strings in one session</li> <li>\u2705 Automatic Backup: Creates backup files before modification</li> <li>\u2705 Verbose Output: Detailed logging for troubleshooting</li> <li>\u2705 Multiple Config Support: Works with various slicer metadata formats</li> </ul>"},{"location":"examples/text-editor/#installation","title":"Installation","text":"<p>Make sure you have the noah123d library installed and the required dependencies:</p> <pre><code>pip install numpy-stl\n</code></pre>"},{"location":"examples/text-editor/#usage","title":"Usage","text":""},{"location":"examples/text-editor/#1-list-text-content","title":"1. list text content","text":"<p>Display all modifiable text in a 3MF file:</p> <pre><code>python text_3mf_editor.py input.3mf --list-text\n</code></pre> <p>Example Output: <pre><code>\ud83d\udd0d Searching for text content in: text.3mf\n============================================================\n\u2705 Found 3 text string(s):\n\n 1. \"Form-Kubus\"\n    Location: Metadata/Slic3r_PE_model.config\n 2. \"Rissen text\"\n    Location: Metadata/Slic3r_PE_model.config\n 3. \"Sunken text\"\n    Location: Metadata/Slic3r_PE_model.config\n</code></pre></p>"},{"location":"examples/text-editor/#2-single-text-replacement","title":"2. single text replacement","text":"<p>Replace one text string with another:</p> <pre><code>python text_3mf_editor.py input.3mf output.3mf \"Old Text\" \"New Text\"\n</code></pre> <p>Example: <pre><code>python text_3mf_editor.py text.3mf custom_text.3mf \"Rissen Text\" \"Raised Text\"\n</code></pre></p>"},{"location":"examples/text-editor/#3-interactive-mode","title":"3. interactive mode","text":"<p>Replace multiple text strings in one session:</p> <pre><code>python text_3mf_editor.py input.3mf output.3mf --interactive\n</code></pre> <p>Example Session: <pre><code>\ud83c\udfaf Interactive Text Editor Mode\n========================================\nFound 3 unique text string(s):\n\n 1. \"Form-Kubus\"\n 2. \"Rissen text\"\n 3. \"Sunken text\"\n\nEnter text to replace (or press Enter to finish):\n&gt; Rissen Text\nEnter new text to replace 'Rissen Text':\n&gt; Custom Raised Text\n\u2705 Added replacement: 'Rissen Text' \u2192 'Custom Raised Text'\n\nEnter text to replace (or press Enter to finish):\n&gt; Sunken Text\nEnter new text to replace 'Sunken Text':\n&gt; Custom Engraved Text\n\u2705 Added replacement: 'Sunken Text' \u2192 'Custom Engraved Text'\n\nEnter text to replace (or press Enter to finish):\n&gt; \n\u2705 Successfully created modified 3MF: output.3mf\n</code></pre></p>"},{"location":"examples/text-editor/#command-line-options","title":"Command line options","text":"Option Description <code>input_file</code> Path to the input 3MF file <code>output_file</code> Path for the output 3MF file (required for modifications) <code>old_text</code> Text to replace (for single replacement mode) <code>new_text</code> New text to use as replacement <code>--list-text</code> List all text content in the file <code>--interactive</code> Enter interactive mode for multiple replacements <code>--verbose</code>, <code>-v</code> Enable verbose output <code>--no-backup</code> Skip creating a backup file"},{"location":"examples/text-editor/#how-it-works","title":"How it works","text":"<p>The 3MF Text Editor works by:</p> <ol> <li>Opening the 3MF archive (3MF files are ZIP archives internally)</li> <li>Locating metadata files that contain text definitions:</li> <li><code>Metadata/Slic3r_PE_model.config</code></li> <li><code>Metadata/PrusaSlicer_model.config</code></li> <li><code>Metadata/model.config</code></li> <li>Parsing XML content to find text strings in:</li> <li>Volume name attributes: <code>&lt;metadata key=\"name\" value=\"Text Here\"/&gt;</code></li> <li>Text elements: <code>&lt;slic3rpe:text text=\"Text Here\" .../&gt;</code></li> <li>Applying replacements to the metadata</li> <li>Recreating the 3MF file with modified metadata</li> </ol>"},{"location":"examples/text-editor/#important-notes","title":"Important notes","text":""},{"location":"examples/text-editor/#what-can-be-modified","title":"What can be modified","text":"<ul> <li>\u2705 Object names and labels stored in slicer metadata</li> <li>\u2705 Embedded text created by CAD software</li> <li>\u2705 Text elements added in slicer programs</li> <li>\u2705 Volume names and descriptions</li> </ul>"},{"location":"examples/text-editor/#what-cannot-be-modified","title":"What cannot be modified","text":"<ul> <li>\u274c Text that is part of the actual 3D mesh geometry</li> <li>\u274c Text \"carved\" or \"embossed\" as 3D shapes</li> <li>\u274c Texture-based text on surfaces</li> <li>\u274c Text in build plate instructions</li> </ul>"},{"location":"examples/text-editor/#compatibility","title":"Compatibility","text":"<ul> <li>Slicer software: PrusaSlicer, Slic3r PE, and compatible slicers</li> <li>CAD software: Any software that stores text as 3MF metadata</li> <li>File types: Standard 3MF files with metadata</li> </ul>"},{"location":"examples/text-editor/#backup-and-safety","title":"Backup and safety","text":"<ul> <li>Automatic backup files are created (unless <code>--no-backup</code> is used)</li> <li>Original 3D geometry is never modified</li> <li>Changes only affect metadata/display names</li> <li>Reversible by restoring from backup</li> </ul>"},{"location":"examples/text-editor/#examples","title":"Examples","text":""},{"location":"examples/text-editor/#example-1-translate-text-to-another-language","title":"Example 1: Translate text to another language","text":"<pre><code># List current text\npython text_3mf_editor.py model.3mf --list-text\n\n# Translate from german to english\npython text_3mf_editor.py model.3mf model_english.3mf \"Geh\u00e4use\" \"Housing\"\npython text_3mf_editor.py model_english.3mf model_final.3mf \"Deckel\" \"Cover\"\n</code></pre>"},{"location":"examples/text-editor/#example-2-customize-product-names","title":"Example 2: Customize product names","text":"<pre><code># Change generic names to specific product names\npython text_3mf_editor.py template.3mf product_v1.3mf --interactive\n# Then interactively replace \"Part A\" with \"Motor mount\", etc.\n</code></pre>"},{"location":"examples/text-editor/#example-3-batch-processing-with-scripts","title":"Example 3: Batch processing with scripts","text":"<pre><code>#!/bin/bash\nfor file in *.3mf; do\n    python text_3mf_editor.py \"$file\" \"processed_$file\" \"Draft\" \"Final\"\ndone\n</code></pre>"},{"location":"examples/text-editor/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/text-editor/#no-modifiable-text-content-found","title":"\"No modifiable text content found\"","text":"<ul> <li>The 3MF file may not contain slicer metadata</li> <li>Text might be part of the 3D geometry (not modifiable)</li> <li>Try opening the file in a slicer to see if text appears</li> </ul>"},{"location":"examples/text-editor/#no-matching-text-found-to-replace","title":"\"No matching text found to replace\"","text":"<ul> <li>Use <code>--list-text</code> to see available text</li> <li>Check for exact spelling and capitalization</li> <li>Text might be in a different metadata format</li> </ul>"},{"location":"examples/text-editor/#file-corruption-warnings","title":"File corruption warnings","text":"<ul> <li>Duplicate name warnings are normal and don't affect functionality</li> <li>Always test the output file before using in production</li> </ul>"},{"location":"examples/text-editor/#technical-details","title":"Technical details","text":"<ul> <li>File Format: 3MF (3D Manufacturing Format) </li> <li>Metadata Location: ZIP archive metadata files</li> <li>Text Storage: XML attributes and elements</li> <li>Encoding: UTF-8 text encoding</li> <li>Backup Strategy: Copy original file with <code>.backup</code> extension</li> </ul>"},{"location":"examples/text-editor/#license","title":"License","text":"<p>MIT License - Free to use and modify.</p>"},{"location":"examples/text-editor/#contributing","title":"Contributing","text":"<p>This tool is part of the noah123d project. Contributions welcome!</p> <p>Need Help? Run <code>python text_3mf_editor.py --help</code> for quick reference.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Noah123d requires:</p> <ul> <li>Python 3.10+ (3.12+ recommended)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation methods","text":""},{"location":"getting-started/installation/#pypi-installation-recommended","title":"\ud83d\udce6 PyPI installation (Recommended)","text":"<p>Install the latest stable release from PyPI:</p> <pre><code>pip install noah123d\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"\ud83d\ude80 Development installation","text":"<p>For the latest features and development version:</p> <pre><code># Clone the repository\ngit clone https://github.com/42sol-eu/noah123d.git\ncd noah123d\n\n# Install with poetry (recommended)\npoetry install\n\n# Or install with pip\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#virtual-environment","title":"\ud83d\udc0d Virtual environment","text":"<p>We recommend using a virtual environment:</p> poetryvenvconda <pre><code># Clone and install with poetry\ngit clone https://github.com/42sol-eu/noah123d.git\ncd noah123d\npoetry install\n\n# Activate poetry shell\npoetry shell\n</code></pre> <pre><code># Create virtual environment\npython -m venv noah123d-env\n\n# Activate (Windows)\nnoah123d-env\\Scripts\\activate\n\n# Activate (Linux/macOS)\nsource noah123d-env/bin/activate\n\n# Install noah123d\npip install noah123d\n</code></pre> <pre><code># Create conda environment\nconda create -n noah123d python=3.12\nconda activate noah123d\n\n# Install noah123d\npip install noah123d\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>Noah123d automatically installs these dependencies:</p> <ul> <li>numpy-stl <code>^3.2.0</code> - STL file processing</li> <li>rich <code>^14.1.0</code> - Beautiful console output</li> <li>click <code>^8.2.1</code> - Command line interface</li> </ul>"},{"location":"getting-started/installation/#development-dependencies","title":"Development dependencies","text":"<p>For development and testing:</p> <ul> <li>pytest <code>^8.4.1</code> - Testing framework</li> <li>ruff <code>^0.0.292</code> - Linter</li> <li>mkdocs <code>^1.5.3</code> - Documentation generator</li> </ul>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>Verify your installation:</p>"},{"location":"getting-started/installation/#command-line","title":"Command line","text":"<pre><code># Check if noah123d CLI is available\nnoah --help\n\n# Get version information\nnoah --version\n</code></pre>"},{"location":"getting-started/installation/#python-import","title":"Python import","text":"<pre><code># Test basic import\nimport noah123d\nprint(noah123d.__version__)\n\n# Test core functions\nfrom noah123d import stl_to_3mf, stl_to_3mf_grid, analyze_3mf\nprint(\"\u2705 Noah123d installed successfully!\")\n</code></pre>"},{"location":"getting-started/installation/#quick-test","title":"Quick test","text":"<pre><code>from noah123d import STLConverter\n\n# Create converter instance\nconverter = STLConverter()\nprint(f\"STLConverter ready: {converter is not None}\")\n\n# Test STL info function\nfrom noah123d import get_stl_info\nprint(\"\u2705 All core functions available!\")\n</code></pre>"},{"location":"getting-started/installation/#platform-support","title":"Platform support","text":"<p>Noah123d is tested on:</p> <ul> <li>Windows 10/11 (x64)</li> <li>macOS 12+ (Intel &amp; Apple Silicon)</li> <li>Linux (Ubuntu 20.04+, CentOS 8+)</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common issues","text":""},{"location":"getting-started/installation/#importerror-no-module-named-stl","title":"ImportError: No module named 'stl'","text":"<pre><code># The numpy-stl dependency wasn't installed properly\npip install --upgrade numpy-stl\n</code></pre>"},{"location":"getting-started/installation/#permission-errors-windows","title":"Permission errors (Windows)","text":"<pre><code># Run as administrator or use --user flag\npip install --user noah123d\n</code></pre>"},{"location":"getting-started/installation/#python-version-issues","title":"Python version issues","text":"<pre><code># Check Python version\npython --version\n\n# Upgrade if needed (Windows)\npython -m pip install --upgrade python\n\n# Use specific Python version\npython3.12 -m pip install noah123d\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting help","text":"<p>If you encounter issues:</p> <ol> <li>Check the version: <code>pip show noah123d</code></li> <li>Update dependencies: <code>pip install --upgrade noah123d</code></li> <li>Create an issue: GitHub issues</li> <li>Join discussions: GitHub discussions</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next steps","text":"<p>After installation:</p> <ol> <li>Quick start - run your first conversion</li> <li>Basic usage - learn core concepts</li> <li>Grid layouts - explore advanced features</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick start","text":"<p>Get up and running with Noah123d in minutes! This guide will walk you through your first STL to 3MF conversion and grid layout creation.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have Noah123d installed:</p> <pre><code>python3 -m pip install noah123d\n</code></pre> <p>[!Note] Instead of <code>python3</code> you need to put your python executable. When using a <code>poetry</code> managed project use <code>poetry add noah123d</code> to add the package to your project.</p>"},{"location":"getting-started/quickstart/#your-first-conversion","title":"Your first conversion","text":""},{"location":"getting-started/quickstart/#1-simple-stl-to-3mf","title":"1. simple STL to 3MF","text":"<p>Let's start with a basic conversion:</p> <pre><code>from noah123d import stl_to_3mf\n\n# Convert a single STL file to 3MF\nsuccess = stl_to_3mf(\n    stl_path=\"your_model.stl\",\n    output_path=\"converted_model.3mf\"\n)\n\nif success:\n    print(\"\u2705 Conversion successful!\")\nelse:\n    print(\"\u274c Conversion failed\")\n</code></pre>"},{"location":"getting-started/quickstart/#2-using-the-cli","title":"2. using the CLI","text":"<p>You can also use the command line interface:</p> <pre><code># Basic conversion\nnoah convert input.stl output.3mf\n\n# With validation\nnoah convert input.stl output.3mf --validate\n\n# Show help\nnoah --help\n</code></pre>"},{"location":"getting-started/quickstart/#grid-layouts","title":"Grid layouts","text":""},{"location":"getting-started/quickstart/#create-your-first-grid","title":"Create your first grid","text":"<p>Create a 2\u00d72 grid with 4 copies:</p> <pre><code>from noah123d import stl_to_3mf_grid\n\nsuccess = stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid_2x2.3mf\",\n    count=4,                    # Number of copies\n    grid_cols=2,               # 2 columns = 2\u00d72 grid\n    spacing_factor=1.2,        # 20% spacing between parts\n    center_grid=True           # Center the grid at origin\n)\n\nprint(f\"Grid created: {success}\")\n</code></pre>"},{"location":"getting-started/quickstart/#different-grid-patterns","title":"Different grid patterns","text":"Square Grid (3\u00d73)Single RowAuto Layout <pre><code>stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid_3x3.3mf\",\n    count=9,\n    grid_cols=3,\n    spacing_factor=1.1\n)\n</code></pre> <pre><code>stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"row_layout.3mf\",\n    count=5,\n    grid_cols=5,\n    spacing_factor=1.5\n)\n</code></pre> <pre><code># Let Noah123d choose optimal layout\nstl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"auto_grid.3mf\",\n    count=6,  # Will create 3\u00d72 grid\n    spacing_factor=1.1\n)\n</code></pre>"},{"location":"getting-started/quickstart/#analyzing-3mf-files","title":"Analyzing 3MF files","text":""},{"location":"getting-started/quickstart/#basic-analysis","title":"Basic analysis","text":"<p>Analyze any 3MF file to get detailed information:</p> <pre><code>from noah123d import analyze_3mf\n\n# Analyze a 3MF file\nanalysis = analyze_3mf(\"model.3mf\")\n\n# Print summary\nsummary = analysis['summary']\nprint(f\"Objects: {summary['object_count']}\")\nprint(f\"Dimensions: {summary['overall_dimensions']}\")\nprint(f\"Center of mass: {summary['overall_center_of_mass']}\")\n\n# Print individual objects\nfor i, model in enumerate(analysis['models']):\n    print(f\"Object {i+1}: {model['dimensions']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#rich-console-output","title":"Rich console output","text":"<p>For beautiful formatted output:</p> <pre><code>from noah123d import analyze_3mf_rich\n\n# Analyze and display with rich formatting\nanalyze_3mf_rich(\"grid_2x2.3mf\")\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example","title":"Complete example","text":"<p>Here's a complete workflow from STL to analysis:</p> <pre><code>from noah123d import stl_to_3mf_grid, analyze_3mf, STLConverter\n\n# 1. create a grid layout\nprint(\"\ud83d\udcd0 Creating grid layout...\")\nsuccess = stl_to_3mf_grid(\n    stl_path=\"input.stl\",\n    output_path=\"production_grid.3mf\",\n    count=12,\n    grid_cols=4,  # 4\u00d73 grid\n    spacing_factor=1.15,\n    center_grid=True\n)\n\nif success:\n    print(\"\u2705 Grid created successfully!\")\n\n    # 2. analyze the result\n    print(\"\\n\ud83d\udd0d Analyzing the grid...\")\n    analysis = analyze_3mf(\"production_grid.3mf\")\n\n    # 3. print results\n    summary = analysis['summary']\n    print(f\"\ud83d\udcca Created {summary['object_count']} objects\")\n    print(f\"\ud83d\udccf Total dimensions: {summary['overall_dimensions']}\")\n    print(f\"\ud83d\udce6 File size: {analysis['file_size']:,} bytes\")\n\n    # 4. get detailed statistics\n    converter = STLConverter(include_metadata=True)\n    stats = converter.get_conversion_stats()\n    if stats:\n        print(f\"\ud83d\ude80 Triangles: {stats.get('triangles', 'N/A'):,}\")\n        print(f\"\u23f1\ufe0f  Time: {stats.get('conversion_time', 'N/A'):.2f}s\")\n\nelse:\n    print(\"\u274c Grid creation failed\")\n</code></pre>"},{"location":"getting-started/quickstart/#cli-examples","title":"CLI examples","text":""},{"location":"getting-started/quickstart/#basic-commands","title":"Basic commands","text":"<pre><code># Convert single file\nnoah convert model.stl output.3mf\n\n# Create grid layout\nnoah grid model.stl grid.3mf --count 4 --cols 2 --spacing 1.2\n\n# Analyze 3MF file\nnoah analyze model.3mf\n\n# Batch convert directory\nnoah batch-convert *.stl --output-dir converted/\n</code></pre>"},{"location":"getting-started/quickstart/#advanced-cli-usage","title":"Advanced CLI usage","text":"<pre><code># Grid with custom settings\nnoah grid part.stl production.3mf \\\n    --count 12 \\\n    --cols 4 \\\n    --spacing 1.15 \\\n    --center \\\n    --validate\n\n# Analyze with rich output\nnoah analyze grid.3mf --rich --export analysis.json\n\n# Convert with metadata\nnoah convert model.stl output.3mf --metadata --validate\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next steps","text":"<p>Now that you've completed your first conversions:</p>"},{"location":"getting-started/quickstart/#learn-more","title":"Learn more","text":"<ol> <li>Basic usage - understand core concepts</li> <li>Grid layouts - master grid configuration</li> <li>3MF analysis - deep dive into analysis features</li> <li>API reference - complete function documentation</li> </ol>"},{"location":"getting-started/quickstart/#try-examples","title":"Try examples","text":"<p>Explore the example files:</p> <pre><code># Run the example scripts\ncd examples/\npython example_3mf.py\npython example_grid_layout.py\npython example_advanced_usage.py\n</code></pre>"},{"location":"getting-started/quickstart/#join-the-community","title":"Join the community","text":"<ul> <li>Issues: Report problems</li> <li>Discussions: Ask questions</li> <li>Contributing: Contribute code</li> </ul>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#common-first-time-issues","title":"Common first-time issues","text":"<p>File Not Found</p> <p>Make sure your STL file path is correct: <pre><code>from pathlib import Path\nstl_file = Path(\"your_model.stl\")\nif not stl_file.exists():\n    print(f\"File not found: {stl_file}\")\n</code></pre></p> <p>Large Files</p> <p>For large STL files, consider using validation: <pre><code>from noah123d import STLConverter\nconverter = STLConverter(validate=True)\nconverter.convert(\"large_model.stl\", \"output.3mf\")\n</code></pre></p> <p>Grid Spacing</p> <p>Start with <code>spacing_factor=1.1</code> (10% gap) for most applications. Increase for more spacing, decrease for tighter packing.</p> <p>Happy converting! \ud83d\ude80</p>"},{"location":"reference/","title":"API reference","text":"<p>Complete API documentation for Noah123d classes and functions.</p>"},{"location":"reference/#overview","title":"Overview","text":"<p>Noah123d provides a clean, modular API for STL to 3MF conversion, grid layouts, and 3MF analysis.</p>"},{"location":"reference/#core-modules","title":"Core modules","text":""},{"location":"reference/#main-functions","title":"Main functions","text":"<p>High-level convenience functions for common tasks:</p> <ul> <li><code>stl_to_3mf()</code> - Simple STL to 3MF conversion</li> <li><code>stl_to_3mf_grid()</code> - Grid layout creation</li> <li><code>analyze_3mf()</code> - 3MF file analysis</li> <li><code>get_stl_info()</code> - STL file information</li> </ul>"},{"location":"reference/#core-classes","title":"Core classes","text":"<p>Low-level classes for advanced control:</p> <ul> <li><code>STLConverter</code> - STL conversion engine</li> <li><code>Archive3mf</code> - 3MF archive management</li> <li><code>Model</code> - 3D model handling</li> <li><code>Directory</code> - 3MF directory structure</li> <li><code>Analysis3MF</code> - 3MF analysis engine</li> </ul>"},{"location":"reference/#quick-reference","title":"Quick reference","text":""},{"location":"reference/#import-statements","title":"Import statements","text":"<pre><code># High-level functions\nfrom noah123d import (\n    stl_to_3mf,\n    stl_to_3mf_grid,\n    analyze_3mf,\n    get_stl_info\n)\n\n# Core classes\nfrom noah123d import (\n    STLConverter,\n    Archive3mf,\n    Model,\n    Directory,\n    Analysis3MF\n)\n\n# Rich output functions\nfrom noah123d import (\n    analyze_3mf_rich,\n    analyze_3mf_json\n)\n</code></pre>"},{"location":"reference/#main-functions_1","title":"Main functions","text":""},{"location":"reference/#stl_to_3mf","title":"<code>stl_to_3mf()</code>","text":"<p>Simple STL to 3MF conversion function.</p> <p>Parameters:</p> <ul> <li>stl_path (<code>str | Path</code>) - Path to input STL file</li> <li>output_path (<code>str | Path</code>) - Path for output 3MF file  </li> <li>validate (<code>bool</code>) - Whether to validate STL file (default: <code>False</code>)</li> <li>include_metadata (<code>bool</code>) - Include conversion metadata (default: <code>True</code>)</li> </ul> <p>Returns:</p> <ul> <li>bool - <code>True</code> if conversion successful, <code>False</code> otherwise</li> </ul> <p>Example:</p> <pre><code>from noah123d import stl_to_3mf\n\nsuccess = stl_to_3mf(\"model.stl\", \"output.3mf\", validate=True)\nif success:\n    print(\"Conversion successful!\")\n</code></pre>"},{"location":"reference/#noah123d.stl_to_3mf","title":"noah123d.stl_to_3mf","text":"<pre><code>stl_to_3mf(\n    stl_path: Union[str, Path],\n    output_path: Union[str, Path],\n    include_metadata: bool = True,\n) -&gt; bool\n</code></pre> <p>Simple function to convert an STL file to 3MF format.</p> <p>Parameters:</p> Name Type Description Default <code>stl_path</code> <code>Union[str, Path]</code> <p>Path to the input STL file</p> required <code>output_path</code> <code>Union[str, Path]</code> <p>Path for the output 3MF file</p> required <code>include_metadata</code> <code>bool</code> <p>Whether to include conversion metadata</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if conversion was successful, False otherwise</p>"},{"location":"reference/#stl_to_3mf_grid","title":"<code>stl_to_3mf_grid()</code>","text":"<p>Create grid layouts with multiple copies.</p> <p>Parameters:</p> <ul> <li>stl_path (<code>str | Path</code>) - Path to input STL file</li> <li>output_path (<code>str | Path</code>) - Path for output 3MF file</li> <li>count (<code>int</code>) - Number of copies to create</li> <li>grid_cols (<code>int | None</code>) - Number of columns (auto-calculated if <code>None</code>)</li> <li>spacing_factor (<code>float</code>) - Spacing multiplier (default: <code>1.1</code>)</li> <li>center_grid (<code>bool</code>) - Center grid at origin (default: <code>True</code>)</li> </ul> <p>Returns:</p> <ul> <li>bool - <code>True</code> if conversion successful, <code>False</code> otherwise</li> </ul> <p>Example:</p> <pre><code>from noah123d import stl_to_3mf_grid\n\n# Create 2\u00d72 grid\nsuccess = stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\",\n    count=4,\n    grid_cols=2,\n    spacing_factor=1.2\n)\n</code></pre>"},{"location":"reference/#noah123d.stl_to_3mf_grid","title":"noah123d.stl_to_3mf_grid","text":"<pre><code>stl_to_3mf_grid(\n    stl_path: Union[str, Path],\n    output_path: Union[str, Path],\n    count: int = 1,\n    grid_cols: Optional[int] = None,\n    spacing_factor: float = 1.1,\n    center_grid: bool = True,\n    include_metadata: bool = True,\n) -&gt; bool\n</code></pre> <p>Convert an STL file to 3MF format with multiple copies in a grid layout.</p> <p>Parameters:</p> Name Type Description Default <code>stl_path</code> <code>Union[str, Path]</code> <p>Path to the input STL file</p> required <code>output_path</code> <code>Union[str, Path]</code> <p>Path for the output 3MF file</p> required <code>count</code> <code>int</code> <p>Total number of copies to create</p> <code>1</code> <code>grid_cols</code> <code>Optional[int]</code> <p>Number of columns in the grid (auto-calculated if None)</p> <code>None</code> <code>spacing_factor</code> <code>float</code> <p>Multiplier for object spacing (1.0 = touching, 1.1 = 10% gap)</p> <code>1.1</code> <code>center_grid</code> <code>bool</code> <p>Whether to center the grid around the origin</p> <code>True</code> <code>include_metadata</code> <code>bool</code> <p>Whether to include conversion metadata</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if conversion was successful, False otherwise</p> Example"},{"location":"reference/#noah123d.stl_to_3mf_grid--create-a-2x2-grid-of-parts-with-20-spacing","title":"Create a 2x2 grid of parts with 20% spacing","text":"<p>success = stl_to_3mf_grid(\"part.stl\", \"grid.3mf\", count=4,  ...                          grid_cols=2, spacing_factor=1.2)</p>"},{"location":"reference/#analyze_3mf","title":"<code>analyze_3mf()</code>","text":"<p>Analyze 3MF files and extract model information.</p> <p>Parameters:</p> <ul> <li>file_path (<code>str | Path</code>) - Path to 3MF file</li> </ul> <p>Returns:</p> <ul> <li>Dict[str, Any] - Analysis results with model information</li> </ul> <p>Example:</p> <pre><code>from noah123d import analyze_3mf\n\nanalysis = analyze_3mf(\"model.3mf\")\nprint(f\"Objects: {analysis['summary']['object_count']}\")\nprint(f\"Dimensions: {analysis['summary']['overall_dimensions']}\")\n</code></pre>"},{"location":"reference/#noah123d.analyze_3mf","title":"noah123d.analyze_3mf","text":"<pre><code>analyze_3mf(file_path: Path) -&gt; Dict[str, Any]\n</code></pre> <p>Convenience function to analyze a 3MF file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>Path to the 3MF file</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Analysis results dictionary</p>"},{"location":"reference/#get_stl_info","title":"<code>get_stl_info()</code>","text":"<p>Get detailed information about STL files.</p> <p>Parameters:</p> <ul> <li>stl_path (<code>str | Path</code>) - Path to STL file</li> </ul> <p>Returns:</p> <ul> <li>Dict[str, Any] | None - STL information or <code>None</code> if error</li> </ul> <p>Example:</p> <pre><code>from noah123d import get_stl_info\n\ninfo = get_stl_info(\"model.stl\")\nif info:\n    print(f\"Triangles: {info['triangle_count']:,}\")\n    print(f\"Vertices: {info['vertex_count']:,}\")\n    print(f\"Dimensions: {info['dimensions']}\")\n</code></pre>"},{"location":"reference/#noah123d.get_stl_info","title":"noah123d.get_stl_info","text":"<pre><code>get_stl_info(\n    stl_path: Union[str, Path],\n) -&gt; Optional[Dict[str, Any]]\n</code></pre> <p>Get information about an STL file.</p> <p>Parameters:</p> Name Type Description Default <code>stl_path</code> <code>Union[str, Path]</code> <p>Path to the STL file</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dictionary with STL file information, or None if file cannot be read</p>"},{"location":"reference/#rich-output-functions","title":"Rich output functions","text":""},{"location":"reference/#analyze_3mf_rich","title":"<code>analyze_3mf_rich()</code>","text":"<p>Beautiful console output with Rich formatting:</p> <pre><code>from noah123d import analyze_3mf_rich\n\n# Display analysis with rich formatting\nanalyze_3mf_rich(\"grid.3mf\")\n</code></pre>"},{"location":"reference/#analyze_3mf_json","title":"<code>analyze_3mf_json()</code>","text":"<p>Export analysis results to JSON:</p> <pre><code>from noah123d import analyze_3mf_json\n\n# Export to JSON file\nanalyze_3mf_json(\"model.3mf\", \"analysis.json\")\n</code></pre>"},{"location":"reference/#type-hints","title":"Type hints","text":"<p>Noah123d uses comprehensive type hints for better IDE support:</p> <pre><code>from typing import Union, Optional, Dict, List, Any\nfrom pathlib import Path\n\n# Path types\nPathLike = Union[str, Path]\n\n# Analysis result type\nAnalysisResult = Dict[str, Any]\n\n# STL info type\nSTLInfo = Optional[Dict[str, Any]]\n</code></pre>"},{"location":"reference/#error-handling","title":"Error handling","text":"<p>All functions use consistent error handling patterns:</p> <pre><code>from noah123d import stl_to_3mf, analyze_3mf\n\n# Conversion with error handling\ntry:\n    success = stl_to_3mf(\"input.stl\", \"output.3mf\")\n    if not success:\n        print(\"Conversion failed - check file paths and format\")\nexcept FileNotFoundError:\n    print(\"Input file not found\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n\n# Analysis with error handling\nanalysis = analyze_3mf(\"model.3mf\")\nif 'error' in analysis:\n    print(f\"Analysis failed: {analysis['error']}\")\nelse:\n    print(\"Analysis successful\")\n</code></pre>"},{"location":"reference/#performance-tips","title":"Performance tips","text":""},{"location":"reference/#memory-management","title":"Memory management","text":"<p>For large files or grids:</p> <pre><code>from noah123d import STLConverter\n\n# Use context manager for automatic cleanup\nconverter = STLConverter()\ntry:\n    success = converter.convert_with_copies(\n        \"large_model.stl\", \"output.3mf\", count=100\n    )\nfinally:\n    # Explicit cleanup if needed\n    del converter\n</code></pre>"},{"location":"reference/#batch-processing","title":"Batch processing","text":"<p>Process multiple files efficiently:</p> <pre><code>from noah123d import STLConverter\n\nconverter = STLConverter()\nfiles = [\"model1.stl\", \"model2.stl\", \"model3.stl\"]\n\nfor stl_file in files:\n    output_file = stl_file.replace(\".stl\", \".3mf\")\n    converter.convert(stl_file, output_file)\n</code></pre>"},{"location":"reference/#constants-and-enums","title":"Constants and enums","text":""},{"location":"reference/#default-values","title":"Default values","text":"<pre><code># Default spacing factor for grids\nDEFAULT_SPACING_FACTOR = 1.1\n\n# Default grid centering\nDEFAULT_CENTER_GRID = True\n\n# Default metadata inclusion\nDEFAULT_INCLUDE_METADATA = True\n\n# Default validation\nDEFAULT_VALIDATE = False\n</code></pre>"},{"location":"reference/#next-steps","title":"Next steps","text":"<p>Explore the detailed documentation for each module:</p> <ul> <li>STLConverter - Core conversion functionality</li> <li>Archive3mf - 3MF file format handling</li> <li>Model - 3D model operations</li> <li>Analysis3MF - Analysis and statistics</li> </ul>"},{"location":"reference/analyzer/","title":"3MF file analyzer documentation","text":""},{"location":"reference/analyzer/#overview","title":"Overview","text":"<p>The Noah123d library now includes a comprehensive 3MF file analyzer that can extract detailed information about models including center of mass, dimensions, volume, surface area, and mesh quality metrics. This is perfect for inspecting 3MF files before 3D printing or for analyzing model properties.</p>"},{"location":"reference/analyzer/#new-analyzer-features","title":"New analyzer features","text":""},{"location":"reference/analyzer/#analysis-capabilities","title":"\ud83d\udd0d analysis capabilities","text":"<ul> <li>Model Geometry: Center of mass, dimensions, bounding box</li> <li>Mesh Properties: Volume, surface area, vertex/triangle counts</li> <li>Quality Metrics: Mesh validation, degenerate triangle detection</li> <li>File Information: Archive contents, file size, object count</li> <li>Comparison Tools: Multi-file comparison and statistics</li> </ul>"},{"location":"reference/analyzer/#output-formats","title":"\ud83d\udcca output formats","text":"<ul> <li>Rich Console: Beautiful formatted tables and panels</li> <li>JSON Export: Structured data for further processing</li> <li>Summary Statistics: Overall and per-model metrics</li> <li>Comparison Reports: Side-by-side file analysis</li> </ul>"},{"location":"reference/analyzer/#api-reference","title":"API reference","text":""},{"location":"reference/analyzer/#core-classes","title":"Core classes","text":""},{"location":"reference/analyzer/#analysis3mf","title":"<code>Analysis3MF</code>","text":"<p>Main analyzer class for 3MF files:</p> <pre><code>from noah123d import Analysis3MF\n\nanalyzer = Analysis3MF()\nanalysis = analyzer.analyze_file(Path(\"model.3mf\"))\n</code></pre>"},{"location":"reference/analyzer/#convenience-functions","title":"Convenience functions","text":""},{"location":"reference/analyzer/#analyze_3mffile_path","title":"<code>analyze_3mf(file_path)</code>","text":"<p>Complete analysis of a 3MF file:</p> <pre><code>from noah123d import analyze_3mf\nfrom pathlib import Path\n\nanalysis = analyze_3mf(Path(\"model.3mf\"))\nprint(f\"Objects: {analysis['summary']['object_count']}\")\nprint(f\"Total volume: {sum(m['volume'] for m in analysis['models']):.1f} mm\u00b3\")\n</code></pre>"},{"location":"reference/analyzer/#get_model_center_of_massfile_path-model_idnone","title":"<code>get_model_center_of_mass(file_path, model_id=None)</code>","text":"<p>Get center of mass coordinates:</p> <pre><code>from noah123d import get_model_center_of_mass\n\n# Overall center of mass\ncenter = get_model_center_of_mass(Path(\"model.3mf\"))\nprint(f\"Center: ({center[0]:.2f}, {center[1]:.2f}, {center[2]:.2f})\")\n\n# Specific model center of mass\nmodel_center = get_model_center_of_mass(Path(\"model.3mf\"), model_id=1)\n</code></pre>"},{"location":"reference/analyzer/#get_model_dimensionsfile_path-model_idnone","title":"<code>get_model_dimensions(file_path, model_id=None)</code>","text":"<p>Get model dimensions:</p> <pre><code>from noah123d import get_model_dimensions\n\n# Overall dimensions\ndims = get_model_dimensions(Path(\"model.3mf\"))\nprint(f\"Size: {dims[0]:.1f} \u00d7 {dims[1]:.1f} \u00d7 {dims[2]:.1f} mm\")\n\n# Specific model dimensions\nmodel_dims = get_model_dimensions(Path(\"model.3mf\"), model_id=1)\n</code></pre>"},{"location":"reference/analyzer/#analysis-results-structure","title":"Analysis results structure","text":"<p>The analyzer returns a comprehensive dictionary with the following structure:</p> <pre><code>{\n    'file_path': str,           # Path to analyzed file\n    'file_size': int,           # File size in bytes\n    'archive_contents': [str],  # List of files in 3MF archive\n    'summary': {\n        'object_count': int,\n        'total_vertices': int,\n        'total_triangles': int,\n        'overall_bounds': {\n            'min': [x, y, z],\n            'max': [x, y, z]\n        },\n        'overall_center_of_mass': [x, y, z],\n        'overall_dimensions': [width, height, depth]\n    },\n    'models': [{\n        'object_id': int,\n        'object_type': str,\n        'vertex_count': int,\n        'triangle_count': int,\n        'bounds': {'min': [x,y,z], 'max': [x,y,z]},\n        'dimensions': [w, h, d],\n        'center_of_mass': [x, y, z],\n        'volume': float,           # mm\u00b3\n        'surface_area': float      # mm\u00b2\n    }]\n}\n</code></pre>"},{"location":"reference/analyzer/#usage-examples","title":"Usage examples","text":""},{"location":"reference/analyzer/#example-1-basic-analysis","title":"Example 1: Basic analysis","text":"<pre><code>from noah123d import analyze_3mf\nfrom pathlib import Path\n\n# Analyze a 3MF file\nanalysis = analyze_3mf(Path(\"my_model.3mf\"))\n\nif 'error' not in analysis:\n    print(f\"File: {Path(analysis['file_path']).name}\")\n    print(f\"Objects: {analysis['summary']['object_count']}\")\n\n    for model in analysis['models']:\n        print(f\"Model {model['object_id']}:\")\n        print(f\"  Center: {model['center_of_mass']}\")\n        print(f\"  Size: {model['dimensions']}\")\n        print(f\"  Volume: {model['volume']:.1f} mm\u00b3\")\n</code></pre>"},{"location":"reference/analyzer/#example-2-convenience-functions","title":"Example 2: Convenience functions","text":"<pre><code>from noah123d import get_model_center_of_mass, get_model_dimensions\nfrom pathlib import Path\n\nfile_path = Path(\"grid_model.3mf\")\n\n# Get overall properties\ncenter = get_model_center_of_mass(file_path)\ndimensions = get_model_dimensions(file_path)\n\nprint(f\"Overall center of mass: {center}\")\nprint(f\"Overall dimensions: {dimensions}\")\n\n# Get individual model properties\nfor model_id in range(1, 5):  # Models 1-4\n    model_center = get_model_center_of_mass(file_path, model_id)\n    model_dims = get_model_dimensions(file_path, model_id)\n\n    if model_center and model_dims:\n        print(f\"Model {model_id}: center={model_center}, size={model_dims}\")\n</code></pre>"},{"location":"reference/analyzer/#example-3-file-comparison","title":"Example 3: File comparison","text":"<pre><code>from noah123d import Analysis3MF\nfrom pathlib import Path\n\nanalyzer = Analysis3MF()\nfiles = [Path(\"model1.3mf\"), Path(\"model2.3mf\"), Path(\"model3.3mf\")]\n\nfor file_path in files:\n    analysis = analyzer.analyze_file(file_path)\n    if 'error' not in analysis:\n        summary = analysis['summary']\n        total_volume = sum(m['volume'] for m in analysis['models'])\n\n        print(f\"{file_path.name}:\")\n        print(f\"  Objects: {summary['object_count']}\")\n        print(f\"  Volume: {total_volume:.1f} mm\u00b3\")\n        print(f\"  Dimensions: {summary['overall_dimensions']}\")\n</code></pre>"},{"location":"reference/analyzer/#example-4-quality-analysis","title":"Example 4: Quality analysis","text":"<pre><code>from noah123d import Analysis3MF\n\nanalyzer = Analysis3MF()\nanalysis = analyzer.analyze_file(Path(\"complex_model.3mf\"))\n\nif 'error' not in analysis:\n    for model in analysis['models']:\n        print(f\"Model {model['object_id']} Quality:\")\n        print(f\"  Vertices: {model['vertex_count']:,}\")\n        print(f\"  Triangles: {model['triangle_count']:,}\")\n        print(f\"  Surface Area: {model['surface_area']:.1f} mm\u00b2\")\n        print(f\"  Volume: {model['volume']:.1f} mm\u00b3\")\n\n        # Calculate density (if known material)\n        if model['volume'] &gt; 0:\n            density = model['surface_area'] / model['volume']\n            print(f\"  Surface/Volume Ratio: {density:.2f}\")\n</code></pre>"},{"location":"reference/analyzer/#advanced-features","title":"Advanced features","text":""},{"location":"reference/analyzer/#rich-console-output","title":"Rich console output","text":"<p>The analyzer includes beautiful console output using the Rich library:</p> <pre><code>from noah123d.examples.analyzer_3mf import Model3MFAnalyzer\n\nanalyzer = Model3MFAnalyzer()\nanalysis = analyzer.analyze_3mf_file(Path(\"model.3mf\"))\nanalyzer.print_analysis(analysis, detailed=True)\n</code></pre> <p>This creates formatted tables showing: - File information panel - Summary statistics - Individual model details table - Mesh quality analysis table</p>"},{"location":"reference/analyzer/#json-export","title":"JSON export","text":"<p>Export analysis results for further processing:</p> <pre><code>import json\nfrom noah123d import analyze_3mf\n\nanalysis = analyze_3mf(Path(\"model.3mf\"))\nwith open(\"analysis_report.json\", \"w\") as f:\n    json.dump(analysis, f, indent=2)\n</code></pre>"},{"location":"reference/analyzer/#batch-analysis","title":"Batch analysis","text":"<p>Analyze multiple files efficiently:</p> <pre><code>from noah123d import Analysis3MF\nfrom pathlib import Path\n\nanalyzer = Analysis3MF()\nresults = {}\n\nfor mf_file in Path(\".\").glob(\"*.3mf\"):\n    analysis = analyzer.analyze_file(mf_file)\n    if 'error' not in analysis:\n        results[mf_file.name] = {\n            'objects': analysis['summary']['object_count'],\n            'volume': sum(m['volume'] for m in analysis['models']),\n            'center': analysis['summary']['overall_center_of_mass']\n        }\n\n# Compare results\nfor filename, data in results.items():\n    print(f\"{filename}: {data['objects']} objects, {data['volume']:.1f} mm\u00b3\")\n</code></pre>"},{"location":"reference/analyzer/#integration-with-grid-layouts","title":"Integration with grid layouts","text":"<p>The analyzer works seamlessly with grid-generated 3MF files:</p> <pre><code>from noah123d import stl_to_3mf_grid, analyze_3mf\n\n# Create a grid layout\nstl_to_3mf_grid(\"part.stl\", \"grid.3mf\", count=9, grid_cols=3)\n\n# Analyze the result\nanalysis = analyze_3mf(Path(\"grid.3mf\"))\nprint(f\"Created {analysis['summary']['object_count']} objects\")\n\n# Check individual object positions\nfor model in analysis['models']:\n    center = model['center_of_mass']\n    print(f\"Object {model['object_id']} at ({center[0]:.1f}, {center[1]:.1f})\")\n</code></pre>"},{"location":"reference/analyzer/#performance","title":"Performance","text":"<p>The analyzer is optimized for large 3MF files:</p> <ul> <li>Fast Processing: Analyzes complex models in seconds</li> <li>Memory Efficient: Streams data without loading entire models</li> <li>Scalable: Handles files with hundreds of objects</li> <li>Accurate Calculations: Precise volume and surface area computations</li> </ul>"},{"location":"reference/analyzer/#applications","title":"Applications","text":"<p>Perfect for:</p> <ul> <li>Pre-Print Inspection: Verify model integrity before 3D printing</li> <li>Quality Control: Check mesh quality and detect issues</li> <li>Production Planning: Calculate material usage and print time estimates</li> <li>Model Optimization: Identify oversized or problematic models</li> <li>Assembly Analysis: Understand part positioning and relationships</li> </ul>"},{"location":"reference/analyzer/#examples-available","title":"Examples available","text":"<p>Run these examples to see the analyzer in action:</p> <pre><code># Comprehensive analyzer demo\npython examples/analyzer_3mf.py\n\n# Basic analysis functions\npython examples/example_3mf_analysis.py\n\n# Grid layout with analysis\npython examples/example_grid_layout.py\n</code></pre> <p>The analyzer provides everything you need to understand and validate your 3MF files before manufacturing! \ud83c\udfaf</p>"},{"location":"reference/archive3mf/","title":"Archive3mf","text":""},{"location":"reference/archive3mf/#archive3mf-class","title":"Archive3mf class","text":"<p>A 3mf (3D Manufacturing Format) file is a ZIP archive, the structure is discussed in this section.</p> <p>You use it in  a nested with blocks:</p> <pre><code>from noah123d import *\n\nwith Archive3mf('example.3mf') as archive:\n    with Directory('3D') as directory:\n        # Perform operations on the directory\n        print(f\"Directory contents: {directory.list_contents()}\")\n        model = archive.read()  \n    # Perform operations on the model\n</code></pre>"},{"location":"reference/archive3mf/#3mf-archive-structure","title":"3MF Archive Structure","text":"<p>A 3MF archive is essentially a ZIP file with a specific directory structure. Here's what a typical 3MF archive looks like:</p> <pre><code>{name}.3mf                          # The main archive \n\u251c\u2500\u2500 [Content_Types].xml             # Required: MIME type definitions\n\u251c\u2500\u2500 _rels/\n\u2502   \u2514\u2500\u2500 .rels                       # Required: Package relationships\n|\n\u251c\u2500\u2500 3D/                             # 3D models directory\n\u2502   \u251c\u2500\u2500 3dmodel.model               # Required: Main 3D model file (XML)\n\u2502   \u2514\u2500\u2500 thumbnail.png               # Optional: Preview thumbnail\n|\n\u251c\u2500\u2500 Metadata/                       # Optional: Additional metadata\n\u2502   \u251c\u2500\u2500 conversion_info.txt         # Custom conversion information\n\u2502   \u2514\u2500\u2500 properties.xml              # Optional: Additional properties\n|\n\u2514\u2500\u2500 Textures/                       # Optional: Texture files\n    \u251c\u2500\u2500 texture1.jpg\n    \u2514\u2500\u2500 texture2.png\n</code></pre> <p>Key Components:</p> <ul> <li><code>[Content_Types].xml</code> - Defines MIME types for all files in the archive</li> <li><code>_rels/.rels</code> - Defines relationships between files in the package</li> <li><code>3D/3dmodel.model</code> - The main 3D model data in XML format containing vertices, triangles, and objects</li> <li><code>3D/</code> directory - Contains all 3D model files and related resources</li> <li><code>Metadata/</code> directory - Optional directory for custom metadata and properties</li> <li><code>Textures/</code> directory - Optional directory for texture images and materials (via extensions)</li> </ul> <p>Note: The 3MF specification does not define an \"attachments\" directory. Custom files should be placed in the <code>Metadata/</code> directory or other appropriately named custom directories with proper content types and relationships.</p>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf","title":"noah123d.archive3mf.Archive3mf","text":"<p>Manages a 3MF zip archive using Python's standard library.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>class Archive3mf:\n    \"\"\"Manages a 3MF zip archive using Python's standard library.\"\"\"\n\n    def __init__(self, file_path: Union[str, Path], mode: str = 'r'):\n        \"\"\"\n        Initialize the Archive3mf.\n\n        Args:\n            file_path: Path to the 3MF file\n            mode: File mode ('r', 'w', 'a')\n        \"\"\"\n        self.file_path = Path(file_path)\n        self.mode = mode\n        self._zipfile: Optional[zipfile.ZipFile] = None\n        self._temp_dir: Optional[tempfile.TemporaryDirectory] = None\n        self._context_token = None\n\n    def __enter__(self) -&gt; 'Archive3mf':\n        \"\"\"Enter the context manager.\"\"\"\n        # Set this archive as the current archive in context\n        self._context_token = current_archive.set(self)\n\n        # Create temporary directory for all modes\n        self._temp_dir = tempfile.TemporaryDirectory()\n\n        # Open the zip file\n        if self.mode == 'w' or not self.file_path.exists():\n            self._zipfile = zipfile.ZipFile(self.file_path, 'w', zipfile.ZIP_DEFLATED)\n            # Create basic 3MF structure\n            self._create_basic_structure()\n        else:\n            self._zipfile = zipfile.ZipFile(self.file_path, self.mode)\n            if self._temp_dir:\n                self._zipfile.extractall(self._temp_dir.name)\n\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Exit the context manager.\"\"\"\n        # Close the zip file\n        if self._zipfile:\n            if self.mode in ('w', 'a') and self._temp_dir:\n                # Re-pack the temporary directory if it was used\n                self._repack_from_temp()\n            self._zipfile.close()\n\n        # Clean up temporary directory\n        if self._temp_dir:\n            self._temp_dir.cleanup()\n\n        # Reset the context variable\n        if self._context_token:\n            current_archive.reset(self._context_token)\n\n    @classmethod\n    def get_current(cls) -&gt; Optional['Archive3mf']:\n        \"\"\"Get the current archive from context.\"\"\"\n        return current_archive.get()\n\n    def _create_basic_structure(self):\n        \"\"\"Create the basic 3MF file structure.\"\"\"\n        # Create [Content_Types].xml\n        self._zipfile.writestr('[Content_Types].xml', content_types_header)\n\n        # Create _rels/.rels\n        self._zipfile.writestr('_rels/.rels', relationships_header)\n\n    def _repack_from_temp(self):\n        \"\"\"Repack the archive from temporary directory.\"\"\"\n        if not self._temp_dir:\n            return\n\n        # Close current zipfile\n        self._zipfile.close()\n\n        # Create new zipfile\n        self._zipfile = zipfile.ZipFile(self.file_path, 'w', zipfile.ZIP_DEFLATED)\n\n        # Add all files from temp directory\n        temp_path = Path(self._temp_dir.name)\n        for file_path in temp_path.rglob('*'):\n            if file_path.is_file():\n                arc_name = file_path.relative_to(temp_path)\n                self._zipfile.write(file_path, arc_name)\n\n    def get_temp_path(self) -&gt; Optional[Path]:\n        \"\"\"Get the temporary directory path for file operations.\"\"\"\n        return Path(self._temp_dir.name) if self._temp_dir else None\n\n    def list_contents(self) -&gt; list[str]:\n        \"\"\"List all files in the archive.\"\"\"\n        if self._zipfile:\n            return self._zipfile.namelist()\n        return []\n\n    def extract_file(self, filename: str) -&gt; Optional[bytes]:\n        \"\"\"Extract a specific file from the archive.\"\"\"\n        if self._zipfile and filename in self._zipfile.namelist():\n            return self._zipfile.read(filename)\n        return None\n\n    def add_file(self, filename: str, data: Union[str, bytes]):\n        \"\"\"Add a file to the archive.\"\"\"\n        if self._zipfile:\n            if isinstance(data, str):\n                data = data.encode('utf-8')\n            self._zipfile.writestr(filename, data)\n\n    def is_writable(self) -&gt; bool:\n        \"\"\"Check if the archive is opened in a writable mode.\"\"\"\n        return self.mode in ('w', 'a')\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.__init__","title":"__init__","text":"<pre><code>__init__(file_path: Union[str, Path], mode: str = 'r')\n</code></pre> <p>Initialize the Archive3mf.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, Path]</code> <p>Path to the 3MF file</p> required <code>mode</code> <code>str</code> <p>File mode ('r', 'w', 'a')</p> <code>'r'</code> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def __init__(self, file_path: Union[str, Path], mode: str = 'r'):\n    \"\"\"\n    Initialize the Archive3mf.\n\n    Args:\n        file_path: Path to the 3MF file\n        mode: File mode ('r', 'w', 'a')\n    \"\"\"\n    self.file_path = Path(file_path)\n    self.mode = mode\n    self._zipfile: Optional[zipfile.ZipFile] = None\n    self._temp_dir: Optional[tempfile.TemporaryDirectory] = None\n    self._context_token = None\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Archive3mf\n</code></pre> <p>Enter the context manager.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def __enter__(self) -&gt; 'Archive3mf':\n    \"\"\"Enter the context manager.\"\"\"\n    # Set this archive as the current archive in context\n    self._context_token = current_archive.set(self)\n\n    # Create temporary directory for all modes\n    self._temp_dir = tempfile.TemporaryDirectory()\n\n    # Open the zip file\n    if self.mode == 'w' or not self.file_path.exists():\n        self._zipfile = zipfile.ZipFile(self.file_path, 'w', zipfile.ZIP_DEFLATED)\n        # Create basic 3MF structure\n        self._create_basic_structure()\n    else:\n        self._zipfile = zipfile.ZipFile(self.file_path, self.mode)\n        if self._temp_dir:\n            self._zipfile.extractall(self._temp_dir.name)\n\n    return self\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre> <p>Exit the context manager.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Exit the context manager.\"\"\"\n    # Close the zip file\n    if self._zipfile:\n        if self.mode in ('w', 'a') and self._temp_dir:\n            # Re-pack the temporary directory if it was used\n            self._repack_from_temp()\n        self._zipfile.close()\n\n    # Clean up temporary directory\n    if self._temp_dir:\n        self._temp_dir.cleanup()\n\n    # Reset the context variable\n    if self._context_token:\n        current_archive.reset(self._context_token)\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.get_current","title":"get_current  <code>classmethod</code>","text":"<pre><code>get_current() -&gt; Optional[Archive3mf]\n</code></pre> <p>Get the current archive from context.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>@classmethod\ndef get_current(cls) -&gt; Optional['Archive3mf']:\n    \"\"\"Get the current archive from context.\"\"\"\n    return current_archive.get()\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.get_temp_path","title":"get_temp_path","text":"<pre><code>get_temp_path() -&gt; Optional[Path]\n</code></pre> <p>Get the temporary directory path for file operations.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def get_temp_path(self) -&gt; Optional[Path]:\n    \"\"\"Get the temporary directory path for file operations.\"\"\"\n    return Path(self._temp_dir.name) if self._temp_dir else None\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.list_contents","title":"list_contents","text":"<pre><code>list_contents() -&gt; list[str]\n</code></pre> <p>List all files in the archive.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def list_contents(self) -&gt; list[str]:\n    \"\"\"List all files in the archive.\"\"\"\n    if self._zipfile:\n        return self._zipfile.namelist()\n    return []\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.extract_file","title":"extract_file","text":"<pre><code>extract_file(filename: str) -&gt; Optional[bytes]\n</code></pre> <p>Extract a specific file from the archive.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def extract_file(self, filename: str) -&gt; Optional[bytes]:\n    \"\"\"Extract a specific file from the archive.\"\"\"\n    if self._zipfile and filename in self._zipfile.namelist():\n        return self._zipfile.read(filename)\n    return None\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.add_file","title":"add_file","text":"<pre><code>add_file(filename: str, data: Union[str, bytes])\n</code></pre> <p>Add a file to the archive.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def add_file(self, filename: str, data: Union[str, bytes]):\n    \"\"\"Add a file to the archive.\"\"\"\n    if self._zipfile:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        self._zipfile.writestr(filename, data)\n</code></pre>"},{"location":"reference/archive3mf/#noah123d.archive3mf.Archive3mf.is_writable","title":"is_writable","text":"<pre><code>is_writable() -&gt; bool\n</code></pre> <p>Check if the archive is opened in a writable mode.</p> Source code in <code>noah123d/archive3mf.py</code> <pre><code>def is_writable(self) -&gt; bool:\n    \"\"\"Check if the archive is opened in a writable mode.\"\"\"\n    return self.mode in ('w', 'a')\n</code></pre>"},{"location":"reference/converters/","title":"STL to 3MF converter documentation","text":""},{"location":"reference/converters/#overview","title":"Overview","text":"<p>The Noah123d library now includes a powerful STL to 3MF converter that uses numpy-stl to read binary STL files and convert them to 3MF format. The converter supports both simple one-line conversions and advanced batch processing with detailed statistics.</p>"},{"location":"reference/converters/#features","title":"Features","text":"<ul> <li>\u2705 Simple API: Convert STL to 3MF with a single function call</li> <li>\u2705 Batch Processing: Convert multiple STL files with glob patterns</li> <li>\u2705 STL Analysis: Get detailed information about STL files</li> <li>\u2705 Metadata Support: Automatic conversion metadata in 3MF files</li> <li>\u2705 Performance Tracking: Detailed conversion statistics</li> <li>\u2705 Validation: STL file validation before conversion</li> <li>\u2705 Rich Output: Beautiful console output with progress bars</li> </ul>"},{"location":"reference/converters/#installation","title":"Installation","text":"<p>The converter uses <code>numpy-stl</code> which is already included in the noah123d dependencies:</p> <pre><code>pip install noah123d\n# Or for development\npip install -e .\n</code></pre>"},{"location":"reference/converters/#quick-start","title":"Quick start","text":""},{"location":"reference/converters/#simple-conversion","title":"Simple conversion","text":"<pre><code>from noah123d import stl_to_3mf\n\n# Convert a single STL file to 3MF\nsuccess = stl_to_3mf(\"model.stl\", \"model.3mf\")\nprint(f\"Conversion {'successful' if success else 'failed'}\")\n</code></pre>"},{"location":"reference/converters/#get-stl-information","title":"Get STL information","text":"<pre><code>from noah123d import get_stl_info\n\ninfo = get_stl_info(\"model.stl\")\nif info:\n    print(f\"Triangles: {info['triangles']:,}\")\n    print(f\"Volume: {info['volume']:.2f} mm\u00b3\")\n    print(f\"Dimensions: {info['dimensions']}\")\n</code></pre>"},{"location":"reference/converters/#batch-conversion","title":"Batch conversion","text":"<pre><code>from noah123d import batch_stl_to_3mf\n\n# Convert all STL files in a directory\nconverted_files = batch_stl_to_3mf(\"models/*.stl\", \"output_dir\")\nprint(f\"Converted {len(converted_files)} files\")\n</code></pre>"},{"location":"reference/converters/#advanced-usage","title":"Advanced usage","text":""},{"location":"reference/converters/#using-the-stlconverter-class","title":"Using the stlconverter class","text":"<pre><code>from noah123d import STLConverter\n\n# Create converter with custom settings\nconverter = STLConverter(\n    include_metadata=True,\n    validate=True\n)\n\n# Convert files\nsuccess = converter.convert(\"input.stl\", \"output.3mf\")\n\n# Get conversion statistics\nstats = converter.get_conversion_stats()\nfor file_path, file_stats in stats.items():\n    print(f\"{file_path}: {file_stats['triangles']:,} triangles\")\n</code></pre>"},{"location":"reference/converters/#manual-3mf-creation-with-stl-data","title":"Manual 3MF creation with STL data","text":"<pre><code>from noah123d import Archive3mf, Directory, Model\n\n# Create 3MF manually with STL data\nwith Archive3mf(\"output.3mf\", 'w') as archive:\n    with Directory('3D') as models_dir:\n        with Model() as model:\n            # Add STL file to model\n            obj_id = model.add_object_from_stl(\"input.stl\")\n            print(f\"Added object with ID: {obj_id}\")\n</code></pre>"},{"location":"reference/converters/#examples","title":"Examples","text":""},{"location":"reference/converters/#example-1-simple-converter-examplesstl_converterpy","title":"Example 1: Simple converter (<code>examples/stl_converter.py</code>)","text":"<p>A minimal example showing basic conversion functionality:</p> <pre><code>from noah123d.converters import stl_to_3mf, get_stl_info\n\n# Get STL information\ninfo = get_stl_info(\"model.stl\")\nprint(f\"File has {info['triangles']:,} triangles\")\n\n# Convert to 3MF\nsuccess = stl_to_3mf(\"model.stl\", \"model.3mf\")\n</code></pre>"},{"location":"reference/converters/#example-2-comprehensive-converter-examplesexample_stl_converterpy","title":"Example 2: Comprehensive converter (<code>examples/example_stl_converter.py</code>)","text":"<p>A full-featured example with rich console output, batch processing, and analysis:</p> <ul> <li>Single file conversion with progress</li> <li>Batch conversion of directories</li> <li>Detailed 3MF file analysis</li> <li>Rich console tables and progress bars</li> </ul>"},{"location":"reference/converters/#example-3-advanced-converter-examplesexample_advanced_converterpy","title":"Example 3: Advanced converter (<code>examples/example_advanced_converter.py</code>)","text":"<p>Demonstrates the advanced STLConverter class with:</p> <ul> <li>Custom converter settings</li> <li>Performance tracking and statistics</li> <li>Progress bars for batch operations</li> <li>Detailed conversion reports</li> </ul>"},{"location":"reference/converters/#api-reference","title":"API reference","text":""},{"location":"reference/converters/#functions","title":"Functions","text":""},{"location":"reference/converters/#stl_to_3mfstl_path-output_path-include_metadatatrue","title":"<code>stl_to_3mf(stl_path, output_path, include_metadata=True)</code>","text":"<p>Convert a single STL file to 3MF format.</p> <p>Parameters: - <code>stl_path</code>: Path to input STL file - <code>output_path</code>: Path for output 3MF file - <code>include_metadata</code>: Include conversion metadata (default: True)</p> <p>Returns: <code>bool</code> - True if successful</p>"},{"location":"reference/converters/#get_stl_infostl_path","title":"<code>get_stl_info(stl_path)</code>","text":"<p>Get detailed information about an STL file.</p> <p>Parameters: - <code>stl_path</code>: Path to STL file</p> <p>Returns: <code>dict</code> - STL file information including: - <code>triangles</code>: Number of triangles - <code>unique_vertices</code>: Number of unique vertices - <code>volume</code>: Volume in mm\u00b3 - <code>surface_area</code>: Surface area in mm\u00b2 - <code>dimensions</code>: [X, Y, Z] dimensions - <code>bounding_box</code>: Min/max coordinates - <code>center_of_gravity</code>: Center of gravity coordinates - <code>is_valid</code>: Whether mesh is valid</p>"},{"location":"reference/converters/#batch_stl_to_3mfinput_pattern-output_dirconverted-include_metadatatrue","title":"<code>batch_stl_to_3mf(input_pattern, output_dir=\"converted\", include_metadata=True)</code>","text":"<p>Convert multiple STL files using glob patterns.</p> <p>Parameters: - <code>input_pattern</code>: Glob pattern (e.g., \"models/*.stl\") - <code>output_dir</code>: Output directory (default: \"converted\") - <code>include_metadata</code>: Include metadata (default: True)</p> <p>Returns: <code>list</code> - List of converted file paths</p>"},{"location":"reference/converters/#stlconverter-class","title":"STLConverter class","text":""},{"location":"reference/converters/#constructor","title":"Constructor","text":"<pre><code>STLConverter(include_metadata=True, compress=True, validate=True)\n</code></pre>"},{"location":"reference/converters/#methods","title":"Methods","text":"<ul> <li><code>convert(stl_path, output_path)</code> - Convert single file</li> <li><code>batch_convert(input_pattern, output_dir, preserve_structure=False)</code> - Batch convert</li> <li><code>get_stl_info(stl_path)</code> - Get STL information</li> <li><code>get_conversion_stats()</code> - Get conversion statistics</li> <li><code>clear_stats()</code> - Clear statistics</li> </ul>"},{"location":"reference/converters/#performance","title":"Performance","text":"<p>The converter is highly optimized and can process:</p> <ul> <li>~137,000 triangles/second average conversion speed</li> <li>Large STL files (100MB+) convert in seconds</li> <li>Minimal memory usage through streaming processing</li> <li>Efficient vertex deduplication</li> </ul>"},{"location":"reference/converters/#file-format-support","title":"File format support","text":""},{"location":"reference/converters/#input-stl","title":"Input (STL)","text":"<ul> <li>\u2705 Binary STL files</li> <li>\u2705 ASCII STL files (via numpy-stl)</li> <li>\u2705 Large files (100MB+)</li> <li>\u2705 Complex geometries</li> </ul>"},{"location":"reference/converters/#output-3mf","title":"Output (3MF)","text":"<ul> <li>\u2705 Standard 3MF format</li> <li>\u2705 Proper XML structure</li> <li>\u2705 Metadata support</li> <li>\u2705 Multiple objects per file</li> </ul>"},{"location":"reference/converters/#testing","title":"Testing","text":"<p>Run the examples to test the converter:</p> <pre><code># Test basic converter\npython examples/stl_converter.py\n\n# Test comprehensive features\npython examples/example_stl_converter.py\n\n# Test advanced features\npython examples/example_advanced_converter.py\n</code></pre>"},{"location":"reference/converters/#error-handling","title":"Error handling","text":"<p>The converter includes comprehensive error handling:</p> <ul> <li>File not found errors</li> <li>Invalid STL format detection</li> <li>Memory limitations</li> <li>Conversion failures</li> <li>Detailed error messages</li> </ul>"},{"location":"reference/converters/#metadata","title":"Metadata","text":"<p>When <code>include_metadata=True</code>, the converter adds a conversion report to the 3MF file containing:</p> <ul> <li>Source file information</li> <li>Conversion statistics</li> <li>Performance metrics</li> <li>Timestamp</li> <li>Converter version</li> </ul> <p>This metadata is stored in <code>Metadata/conversion_report.txt</code> within the 3MF archive.</p>"},{"location":"reference/converters/#integration","title":"Integration","text":"<p>The converter integrates seamlessly with the existing noah123d workflow:</p> <ol> <li>Use <code>archive3mf</code> for 3MF file management</li> <li>Use <code>directory</code> for organizing 3MF content</li> <li>Use <code>model</code> for 3D object management</li> <li>Use <code>stlconverter</code> for STL file processing</li> </ol> <p>This provides a complete pipeline from STL files to complex 3MF assemblies.</p>"},{"location":"reference/model/","title":"Model","text":""},{"location":"reference/model/#model-class","title":"Model class","text":"<p>The <code>Model</code> class represents a 3D model structure within the 3MF file format. It encapsulates the various components and metadata associated with the model, including parts, assemblies, and their relationships.</p>"},{"location":"reference/model/#attributes","title":"Attributes","text":"<p>TODO: review model attributes - <code>id</code>: A unique identifier for the model. - <code>name</code>: The name of the model. - <code>parts</code>: A list of parts that make up the model. - <code>assemblies</code>: A list of assemblies that define the structure of the model.</p>"},{"location":"reference/model/#methods","title":"Methods","text":"<p>TODO: review model methods - <code>add_part(part)</code>: Adds a new part to the model. - <code>remove_part(part)</code>: Removes a part from the model. - <code>get_part(part_id)</code>: Retrieves a part by its ID. - <code>add_assembly(assembly)</code>: Adds a new assembly to the model. - <code>remove_assembly(assembly)</code>: Removes an assembly from the model. - <code>get_assembly(assembly_id)</code>: Retrieves an assembly by its ID.</p>"},{"location":"reference/multi-assembly/","title":"Multi-STL assembly guide","text":"<p>This guide demonstrates how to create 3MF assemblies from multiple STL files with specified counts for each component using the noah123d library.</p>"},{"location":"reference/multi-assembly/#overview","title":"Overview","text":"<p>The <code>multi_stl_to_3mf()</code> function allows you to combine multiple different STL files into a single 3MF assembly, specifying how many copies of each part should be included. This is perfect for creating assemblies, kits, or collections of related parts.</p>"},{"location":"reference/multi-assembly/#basic-usage","title":"Basic usage","text":"<pre><code>from noah123d import multi_stl_to_3mf\n\n# Define your assembly components\nstl_objects = [\n    {'path': 'base.stl', 'count': 1, 'name': 'Base'},\n    {'path': 'screw.stl', 'count': 4, 'name': 'Screw'},\n    {'path': 'washer.stl', 'count': 4, 'name': 'Washer'},\n    {'path': 'nut.stl', 'count': 4}  # name is optional\n]\n\n# Create the assembly\nsuccess = multi_stl_to_3mf(stl_objects, 'assembly.3mf')\n</code></pre>"},{"location":"reference/multi-assembly/#stl-object-specification","title":"STL object specification","text":"<p>Each STL object is defined by a dictionary with the following keys:</p> <ul> <li><code>path</code> (required): Path to the STL file (string or Path object)</li> <li><code>count</code> (optional): Number of copies to create (default: 1)</li> <li><code>name</code> (optional): Custom name for the object (default: filename without extension)</li> </ul>"},{"location":"reference/multi-assembly/#layout-modes","title":"Layout modes","text":""},{"location":"reference/multi-assembly/#grid-layout-default","title":"Grid layout (Default)","text":"<p>Arranges objects in an optimal grid pattern: <pre><code>multi_stl_to_3mf(stl_objects, 'grid_assembly.3mf', layout_mode='grid')\n</code></pre></p>"},{"location":"reference/multi-assembly/#linear-layout","title":"Linear layout","text":"<p>Arranges all objects in a single horizontal line: <pre><code>multi_stl_to_3mf(stl_objects, 'linear_assembly.3mf', layout_mode='linear')\n</code></pre></p>"},{"location":"reference/multi-assembly/#stack-layout","title":"Stack layout","text":"<p>Stacks all objects vertically (Z-axis): <pre><code>multi_stl_to_3mf(stl_objects, 'stack_assembly.3mf', layout_mode='stack')\n</code></pre></p>"},{"location":"reference/multi-assembly/#advanced-options","title":"Advanced options","text":""},{"location":"reference/multi-assembly/#spacing-control","title":"Spacing control","text":"<p>Control the spacing between objects: <pre><code>multi_stl_to_3mf(\n    stl_objects,\n    'spaced_assembly.3mf',\n    spacing_factor=1.5,  # 50% extra space between objects\n    center_layout=True   # Center the entire layout\n)\n</code></pre></p>"},{"location":"reference/multi-assembly/#using-stlconverter-class","title":"Using stlconverter class","text":"<p>For more control and access to statistics: <pre><code>from noah123d import STLConverter\n\nconverter = STLConverter(include_metadata=True, validate=True)\n\nsuccess = converter.convert_multiple_stl_with_counts(\n    stl_objects=stl_objects,\n    output_path='advanced_assembly.3mf',\n    layout_mode='grid',\n    spacing_factor=1.2,\n    center_layout=True\n)\n\n# Get conversion statistics\nstats = converter.get_conversion_stats()\nprint(f\"Total objects: {stats['advanced_assembly.3mf']['total_objects']}\")\n</code></pre></p>"},{"location":"reference/multi-assembly/#complete-example","title":"Complete example","text":"<pre><code>from pathlib import Path\nfrom noah123d import multi_stl_to_3mf\n\ndef create_printer_assembly():\n    \"\"\"Create a 3D printer part assembly.\"\"\"\n\n    # Define the assembly components\n    assembly_parts = [\n        {'path': 'printer_frame.stl', 'count': 1, 'name': 'Frame'},\n        {'path': 'corner_bracket.stl', 'count': 8, 'name': 'Corner_Bracket'},\n        {'path': 'stepper_mount.stl', 'count': 4, 'name': 'Stepper_Mount'},\n        {'path': 'belt_tensioner.stl', 'count': 2, 'name': 'Belt_Tensioner'},\n        {'path': 'filament_guide.stl', 'count': 1, 'name': 'Filament_Guide'}\n    ]\n\n    # Check if all files exist\n    valid_parts = []\n    for part in assembly_parts:\n        if Path(part['path']).exists():\n            valid_parts.append(part)\n            print(f\\\"\u2713 {part['name']}: {part['count']} copies\\\")\n        else:\n            print(f\\\"\u26a0 Missing: {part['path']}\\\")\n\n    if not valid_parts:\n        print(\\\"No STL files found!\\\")\n        return False\n\n    # Create the assembly with grid layout\n    success = multi_stl_to_3mf(\n        stl_objects=valid_parts,\n        output_path='printer_assembly.3mf',\n        layout_mode='grid',\n        spacing_factor=1.3,  # 30% spacing for clear separation\n        center_layout=True,\n        include_metadata=True\n    )\n\n    if success:\n        print(\\\"\ud83c\udf89 Assembly created: printer_assembly.3mf\\\")\n\n        # Calculate total parts\n        total_parts = sum(part['count'] for part in valid_parts)\n        print(f\\\"Total parts in assembly: {total_parts}\\\")\n        return True\n    else:\n        print(\\\"\u274c Failed to create assembly\\\")\n        return False\n\nif __name__ == \\\"__main__\\\":\n    create_printer_assembly()\n</code></pre>"},{"location":"reference/multi-assembly/#error-handling","title":"Error handling","text":"<p>The function includes comprehensive error handling:</p> <pre><code>from noah123d import multi_stl_to_3mf, STLConverter\n\n# Example with error handling\nstl_objects = [\n    {'path': 'existing_file.stl', 'count': 2},\n    {'path': 'missing_file.stl', 'count': 1}  # This will cause an error\n]\n\ntry:\n    success = multi_stl_to_3mf(stl_objects, 'test_assembly.3mf')\n    if not success:\n        # Check for errors\n        converter = STLConverter()\n        stats = converter.get_conversion_stats()\n        if 'test_assembly.3mf' in stats and 'error' in stats['test_assembly.3mf']:\n            print(f\\\"Error: {stats['test_assembly.3mf']['error']}\\\")\nexcept Exception as e:\n    print(f\\\"Conversion failed: {e}\\\")\n</code></pre>"},{"location":"reference/multi-assembly/#metadata-generation","title":"Metadata generation","text":"<p>When <code>include_metadata=True</code> (default), the function generates detailed metadata including:</p> <ul> <li>Source file information for each STL</li> <li>Object counts and dimensions</li> <li>Conversion performance statistics</li> <li>Object placement coordinates</li> <li>Layout configuration details</li> </ul> <p>The metadata is stored in the 3MF file and can be accessed by 3D printing software or other tools.</p>"},{"location":"reference/multi-assembly/#performance-tips","title":"Performance tips","text":"<ol> <li>File validation: Set <code>validate=False</code> in stlconverter for faster processing if you're confident your STL files are valid</li> <li>Large assemblies: For assemblies with many objects, consider using <code>layout_mode='linear'</code> for simpler calculations</li> <li>Memory usage: Very large STL files with high counts may require substantial memory</li> <li>Spacing: Use appropriate <code>spacing_factor</code> values to prevent objects from overlapping in the final layout</li> </ol>"},{"location":"reference/multi-assembly/#use-cases","title":"Use cases","text":"<ul> <li>Product Assemblies: Create kits with all required parts</li> <li>Replacement Parts: Group different quantities of spare parts</li> <li>Educational Sets: Combine learning materials with varying quantities</li> <li>Prototyping: Test different part combinations and layouts</li> <li>Manufacturing: Prepare parts for batch production</li> </ul>"},{"location":"reference/multi-assembly/#see-also","title":"See also","text":"<ul> <li><code>stl_to_3mf_grid()</code> - For multiple copies of the same STL file</li> <li><code>batch_stl_to_3mf()</code> - For converting multiple STL files to separate 3MF files</li> <li><code>stl_to_3mf()</code> - For simple single STL to 3MF conversion</li> </ul>"},{"location":"user-guide/3mf-analysis/","title":"3MF analysis","text":"<p>Noah123d provides comprehensive analysis tools for 3MF files, allowing you to inspect geometry, metadata, and grid layouts.</p>"},{"location":"user-guide/3mf-analysis/#overview","title":"Overview","text":"<p>The analysis system provides:</p> <ol> <li>File structure analysis: Internal 3MF archive inspection</li> <li>Geometry analysis: Object dimensions, triangles, volumes</li> <li>Grid analysis: Layout verification and spacing calculations</li> <li>Metadata extraction: Custom properties and conversion statistics</li> <li>Validation: File integrity and format compliance</li> </ol>"},{"location":"user-guide/3mf-analysis/#core-functions","title":"Core functions","text":""},{"location":"user-guide/3mf-analysis/#analyze_3mf","title":"<code>analyze_3mf()</code>","text":"<p>Main analysis function for comprehensive file inspection:</p> <pre><code>from noah123d import analyze_3mf\n\n# Analyze a 3MF file\nanalysis = analyze_3mf(\"grid_2x2.3mf\")\n\n# Print summary\nprint(f\"Objects: {analysis['summary']['object_count']}\")\nprint(f\"Total Triangles: {analysis['summary']['total_triangles']:,}\")\nprint(f\"File Size: {analysis['summary']['file_size_mb']:.1f} MB\")\nprint(f\"Overall Dimensions: {analysis['summary']['overall_dimensions']}\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#analyzer3mf-class","title":"<code>Analyzer3MF</code> class","text":"<p>Advanced analysis with detailed control:</p> <pre><code>from noah123d import Analyzer3MF\n\nanalyzer = Analyzer3MF()\nresult = analyzer.analyze_file(\"production_batch.3mf\")\n\nif result['success']:\n    analysis = result['analysis']\n\n    # Get detailed model information\n    for i, model in enumerate(analysis['models']):\n        print(f\"Model {i+1}:\")\n        print(f\"  Triangles: {model['triangle_count']:,}\")\n        print(f\"  Volume: {model['volume']:.2f} mm\u00b3\")\n        print(f\"  Center: {model['center_of_mass']}\")\n        print(f\"  Bounds: {model['bounding_box']}\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#analysis-results","title":"Analysis results","text":""},{"location":"user-guide/3mf-analysis/#summary-information","title":"Summary information","text":"<pre><code>analysis = analyze_3mf(\"grid_3x3.3mf\")\nsummary = analysis['summary']\n\nprint(\"\ud83d\udcca File Summary:\")\nprint(f\"   Objects: {summary['object_count']}\")\nprint(f\"   Total Triangles: {summary['total_triangles']:,}\")\nprint(f\"   File Size: {summary['file_size_mb']:.1f} MB\")\nprint(f\"   Creation Time: {summary.get('creation_time', 'Unknown')}\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#individual-model-analysis","title":"Individual model analysis","text":"<pre><code># Analyze each model individually\nfor i, model in enumerate(analysis['models']):\n    print(f\"\\n\ud83d\udd0d Model {i+1} Analysis:\")\n    print(f\"   Triangles: {model['triangle_count']:,}\")\n    print(f\"   Volume: {model['volume']:.2f} mm\u00b3\")\n    print(f\"   Surface Area: {model['surface_area']:.2f} mm\u00b2\")\n    print(f\"   Center of Mass: {model['center_of_mass']}\")\n\n    # Bounding box\n    bbox = model['bounding_box']\n    print(f\"   Dimensions: {bbox['width']:.1f} \u00d7 {bbox['height']:.1f} \u00d7 {bbox['depth']:.1f} mm\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#metadata-analysis","title":"Metadata analysis","text":"<pre><code># Extract metadata\nmetadata = analysis.get('metadata', {})\n\nif metadata:\n    print(\"\ud83d\udccb Metadata:\")\n    print(f\"   Creator: {metadata.get('creator', 'Unknown')}\")\n    print(f\"   Creation Tool: {metadata.get('creation_tool', 'Unknown')}\")\n    print(f\"   Grid Layout: {metadata.get('grid_layout', 'N/A')}\")\n    print(f\"   Spacing Factor: {metadata.get('spacing_factor', 'N/A')}\")\n    print(f\"   Original STL: {metadata.get('source_stl', 'Unknown')}\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#grid-analysis","title":"Grid analysis","text":""},{"location":"user-guide/3mf-analysis/#layout-verification","title":"Layout verification","text":"<p>For grid-generated 3MF files, verify the layout:</p> <pre><code>def analyze_grid_layout(file_path):\n    analysis = analyze_3mf(file_path)\n    models = analysis['models']\n\n    if len(models) &lt; 2:\n        print(\"Single object, no grid analysis possible\")\n        return\n\n    # Calculate grid dimensions\n    positions = [model['center_of_mass'] for model in models]\n    x_positions = sorted(set(round(pos[0], 1) for pos in positions))\n    y_positions = sorted(set(round(pos[1], 1) for pos in positions))\n\n    grid_cols = len(x_positions)\n    grid_rows = len(y_positions)\n\n    print(f\"\ud83d\udd22 Grid Layout Analysis:\")\n    print(f\"   Detected Grid: {grid_rows}\u00d7{grid_cols}\")\n    print(f\"   Total Objects: {len(models)}\")\n    print(f\"   Expected Objects: {grid_rows * grid_cols}\")\n\n    # Calculate spacing\n    if len(x_positions) &gt; 1:\n        x_spacing = x_positions[1] - x_positions[0]\n        print(f\"   X-axis Spacing: {x_spacing:.1f} mm\")\n\n    if len(y_positions) &gt; 1:\n        y_spacing = y_positions[1] - y_positions[0]\n        print(f\"   Y-axis Spacing: {y_spacing:.1f} mm\")\n\n# Example usage\nanalyze_grid_layout(\"grid_2x2.3mf\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#position-analysis","title":"Position analysis","text":"<pre><code>def analyze_object_positions(file_path):\n    analysis = analyze_3mf(file_path)\n\n    print(\"\ud83d\udccd Object Positions:\")\n    for i, model in enumerate(analysis['models']):\n        pos = model['center_of_mass']\n        print(f\"   Object {i+1}: ({pos[0]:6.1f}, {pos[1]:6.1f}, {pos[2]:6.1f})\")\n\n    # Check for overlaps\n    positions = [model['center_of_mass'] for model in analysis['models']]\n    bboxes = [model['bounding_box'] for model in analysis['models']]\n\n    overlaps = []\n    for i in range(len(positions)):\n        for j in range(i+1, len(positions)):\n            # Simple overlap check using bounding boxes\n            bbox1, bbox2 = bboxes[i], bboxes[j]\n            pos1, pos2 = positions[i], positions[j]\n\n            # Calculate distance between centers\n            distance = ((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)**0.5\n            min_distance = (bbox1['width'] + bbox2['width']) / 2\n\n            if distance &lt; min_distance * 0.9:  # 10% tolerance\n                overlaps.append((i+1, j+1))\n\n    if overlaps:\n        print(f\"\u26a0\ufe0f  Potential overlaps detected: {overlaps}\")\n    else:\n        print(\"\u2705 No overlaps detected\")\n\n# Example usage\nanalyze_object_positions(\"tight_pack.3mf\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#performance-analysis","title":"Performance analysis","text":""},{"location":"user-guide/3mf-analysis/#conversion-statistics","title":"Conversion statistics","text":"<pre><code>def analyze_performance(file_path):\n    analysis = analyze_3mf(file_path)\n    metadata = analysis.get('metadata', {})\n\n    if 'conversion_time' in metadata:\n        total_triangles = analysis['summary']['total_triangles']\n        conversion_time = metadata['conversion_time']\n\n        print(\"\u26a1 Performance Analysis:\")\n        print(f\"   Conversion Time: {conversion_time:.2f}s\")\n        print(f\"   Processing Rate: {total_triangles/conversion_time:,.0f} triangles/sec\")\n        print(f\"   File Size: {analysis['summary']['file_size_mb']:.1f} MB\")\n        print(f\"   Size per Object: {analysis['summary']['file_size_mb']/analysis['summary']['object_count']:.2f} MB\")\n\n# Example usage\nanalyze_performance(\"production_batch.3mf\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#memory-usage","title":"Memory usage","text":"<pre><code>import psutil\nimport os\n\ndef analyze_memory_usage(file_path):\n    file_size = os.path.getsize(file_path) / (1024**2)  # MB\n\n    print(\"\ud83d\udcbe Memory Analysis:\")\n    print(f\"   File Size: {file_size:.1f} MB\")\n    print(f\"   Current Memory Usage: {psutil.virtual_memory().percent:.1f}%\")\n    print(f\"   Available Memory: {psutil.virtual_memory().available / (1024**3):.1f} GB\")\n\n    # Estimate memory requirements for loading\n    estimated_memory = file_size * 3  # Rough estimate\n    print(f\"   Estimated Load Memory: {estimated_memory:.1f} MB\")\n\n# Example usage\nanalyze_memory_usage(\"large_grid.3mf\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#validation","title":"Validation","text":""},{"location":"user-guide/3mf-analysis/#file-integrity","title":"File integrity","text":"<pre><code>def validate_3mf_file(file_path):\n    \"\"\"Comprehensive 3MF file validation\"\"\"\n\n    try:\n        analysis = analyze_3mf(file_path)\n\n        # Basic validation\n        checks = {\n            \"File exists\": os.path.exists(file_path),\n            \"Has objects\": analysis['summary']['object_count'] &gt; 0,\n            \"Has triangles\": analysis['summary']['total_triangles'] &gt; 0,\n            \"Valid dimensions\": all(d &gt; 0 for d in analysis['summary']['overall_dimensions']),\n            \"No zero volumes\": all(model['volume'] &gt; 0 for model in analysis['models'])\n        }\n\n        print(\"\ud83d\udd0d File Validation:\")\n        for check, passed in checks.items():\n            status = \"\u2705\" if passed else \"\u274c\"\n            print(f\"   {status} {check}\")\n\n        # Overall result\n        all_passed = all(checks.values())\n        print(f\"\\n{'\u2705 File is valid' if all_passed else '\u274c File has issues'}\")\n\n        return all_passed\n\n    except Exception as e:\n        print(f\"\u274c Validation failed: {e}\")\n        return False\n\n# Example usage\nvalidate_3mf_file(\"grid_2x2.3mf\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#grid-validation","title":"Grid validation","text":"<pre><code>def validate_grid(file_path, expected_count=None, expected_spacing=None):\n    \"\"\"Validate grid layout parameters\"\"\"\n\n    analysis = analyze_3mf(file_path)\n    models = analysis['models']\n\n    print(\"\ud83d\udd22 Grid Validation:\")\n\n    # Count validation\n    if expected_count:\n        count_valid = len(models) == expected_count\n        status = \"\u2705\" if count_valid else \"\u274c\"\n        print(f\"   {status} Object count: {len(models)} (expected: {expected_count})\")\n\n    # Spacing validation\n    if expected_spacing and len(models) &gt;= 2:\n        positions = [model['center_of_mass'] for model in models]\n        actual_spacing = abs(positions[1][0] - positions[0][0])\n        tolerance = expected_spacing * 0.05  # 5% tolerance\n        spacing_valid = abs(actual_spacing - expected_spacing) &lt; tolerance\n\n        status = \"\u2705\" if spacing_valid else \"\u274c\"\n        print(f\"   {status} Spacing: {actual_spacing:.1f}mm (expected: {expected_spacing:.1f}mm)\")\n\n    # Alignment validation\n    if len(models) &gt;= 4:  # At least 2x2 grid\n        x_coords = [model['center_of_mass'][0] for model in models]\n        y_coords = [model['center_of_mass'][1] for model in models]\n\n        x_unique = len(set(round(x, 1) for x in x_coords))\n        y_unique = len(set(round(y, 1) for y in y_coords))\n\n        print(f\"   \ud83d\udcd0 Grid structure: {y_unique}\u00d7{x_unique}\")\n\n# Example usage\nvalidate_grid(\"grid_2x2.3mf\", expected_count=4, expected_spacing=55.0)\n</code></pre>"},{"location":"user-guide/3mf-analysis/#comparison-tools","title":"Comparison tools","text":""},{"location":"user-guide/3mf-analysis/#compare-multiple-files","title":"Compare multiple files","text":"<pre><code>def compare_3mf_files(file_paths):\n    \"\"\"Compare multiple 3MF files\"\"\"\n\n    print(\"\ud83d\udcca File Comparison:\")\n    print(f\"{'File':&lt;20} {'Objects':&lt;8} {'Triangles':&lt;12} {'Size (MB)':&lt;10}\")\n    print(\"-\" * 55)\n\n    for file_path in file_paths:\n        analysis = analyze_3mf(file_path)\n        filename = os.path.basename(file_path)\n\n        print(f\"{filename:&lt;20} \"\n              f\"{analysis['summary']['object_count']:&lt;8} \"\n              f\"{analysis['summary']['total_triangles']:&lt;12,} \"\n              f\"{analysis['summary']['file_size_mb']:&lt;10.1f}\")\n\n# Example usage\ncompare_3mf_files([\n    \"grid_2x2.3mf\",\n    \"grid_3x3.3mf\", \n    \"production_batch.3mf\"\n])\n</code></pre>"},{"location":"user-guide/3mf-analysis/#export-analysis","title":"Export analysis","text":""},{"location":"user-guide/3mf-analysis/#generate-reports","title":"Generate reports","text":"<pre><code>import json\nfrom datetime import datetime\n\ndef generate_analysis_report(file_path, output_path=None):\n    \"\"\"Generate detailed analysis report\"\"\"\n\n    analysis = analyze_3mf(file_path)\n\n    # Create comprehensive report\n    report = {\n        \"analysis_timestamp\": datetime.now().isoformat(),\n        \"file_path\": file_path,\n        \"summary\": analysis['summary'],\n        \"models\": analysis['models'],\n        \"metadata\": analysis.get('metadata', {}),\n        \"validation\": validate_3mf_file(file_path)\n    }\n\n    # Save report\n    if not output_path:\n        output_path = file_path.replace('.3mf', '.analysis.json')\n\n    with open(output_path, 'w') as f:\n        json.dump(report, f, indent=2, default=str)\n\n    print(f\"\ud83d\udcc4 Analysis report saved: {output_path}\")\n    return report\n\n# Example usage\ngenerate_analysis_report(\"grid_2x2.3mf\")\n</code></pre>"},{"location":"user-guide/3mf-analysis/#next-steps","title":"Next steps","text":"<ul> <li>Grid Layouts - Create optimized grids</li> <li>Batch Processing - Process multiple files</li> <li>API Reference - Detailed analysis API</li> </ul>"},{"location":"user-guide/batch-processing/","title":"Batch processing","text":"<p>Noah123d provides powerful batch processing capabilities for handling multiple STL files and creating large-scale 3D printing production runs.</p>"},{"location":"user-guide/batch-processing/#overview","title":"Overview","text":"<p>Batch processing features:</p> <ol> <li>Multiple file processing: Convert entire directories of STL files</li> <li>Production workflows: Automated grid generation for manufacturing</li> <li>Parallel processing: Multi-threaded conversion for speed</li> <li>Progress tracking: Real-time progress monitoring</li> <li>Error handling: Robust error recovery and reporting</li> </ol>"},{"location":"user-guide/batch-processing/#core-functions","title":"Core functions","text":""},{"location":"user-guide/batch-processing/#batch_convert_stl_to_3mf","title":"<code>batch_convert_stl_to_3mf()</code>","text":"<p>Convert multiple STL files to individual 3MF files:</p> <pre><code>from noah123d import batch_convert_stl_to_3mf\n\n# Convert all STL files in a directory\nresults = batch_convert_stl_to_3mf(\n    input_dir=\"stl_files/\",\n    output_dir=\"3mf_files/\",\n    include_metadata=True,\n    validate=True,\n    max_workers=4  # Parallel processing\n)\n\n# Check results\nsuccessful = sum(1 for r in results if r['success'])\nprint(f\"Converted {successful}/{len(results)} files successfully\")\n</code></pre>"},{"location":"user-guide/batch-processing/#batch_create_grids","title":"<code>batch_create_grids()</code>","text":"<p>Create grid layouts for multiple STL files:</p> <pre><code>from noah123d import batch_create_grids\n\n# Batch grid creation\ngrid_configs = [\n    {\"stl_path\": \"part1.stl\", \"count\": 4, \"grid_cols\": 2},\n    {\"stl_path\": \"part2.stl\", \"count\": 9, \"grid_cols\": 3},\n    {\"stl_path\": \"part3.stl\", \"count\": 6, \"grid_cols\": 2},\n]\n\nresults = batch_create_grids(\n    configs=grid_configs,\n    output_dir=\"production_grids/\",\n    spacing_factor=1.2,\n    center_grid=True,\n    max_workers=2\n)\n</code></pre>"},{"location":"user-guide/batch-processing/#directory-processing","title":"Directory processing","text":""},{"location":"user-guide/batch-processing/#process-entire-directories","title":"Process entire directories","text":"<pre><code>import os\nfrom noah123d import STLConverter\n\ndef process_directory(input_dir, output_dir, **kwargs):\n    \"\"\"Process all STL files in a directory\"\"\"\n\n    converter = STLConverter(include_metadata=True, validate=True)\n\n    # Find all STL files\n    stl_files = []\n    for root, dirs, files in os.walk(input_dir):\n        for file in files:\n            if file.lower().endswith('.stl'):\n                stl_files.append(os.path.join(root, file))\n\n    print(f\"Found {len(stl_files)} STL files\")\n\n    # Process each file\n    results = []\n    for i, stl_path in enumerate(stl_files, 1):\n        print(f\"Processing {i}/{len(stl_files)}: {os.path.basename(stl_path)}\")\n\n        # Generate output path\n        relative_path = os.path.relpath(stl_path, input_dir)\n        output_path = os.path.join(output_dir, relative_path.replace('.stl', '.3mf'))\n\n        # Ensure output directory exists\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n\n        # Convert file\n        success = converter.convert(stl_path, output_path, **kwargs)\n        results.append({\n            'input_path': stl_path,\n            'output_path': output_path,\n            'success': success\n        })\n\n    return results\n\n# Example usage\nresults = process_directory(\n    input_dir=\"models/\",\n    output_dir=\"converted/\",\n    include_metadata=True,\n    validate=True\n)\n</code></pre>"},{"location":"user-guide/batch-processing/#filtered-processing","title":"Filtered processing","text":"<pre><code>import fnmatch\n\ndef process_filtered_directory(input_dir, output_dir, pattern=\"*.stl\", **kwargs):\n    \"\"\"Process files matching a specific pattern\"\"\"\n\n    converter = STLConverter(include_metadata=True)\n\n    # Find matching files\n    matching_files = []\n    for root, dirs, files in os.walk(input_dir):\n        for file in files:\n            if fnmatch.fnmatch(file.lower(), pattern.lower()):\n                matching_files.append(os.path.join(root, file))\n\n    print(f\"Found {len(matching_files)} files matching '{pattern}'\")\n\n    # Process files\n    for file_path in matching_files:\n        output_path = file_path.replace(input_dir, output_dir).replace('.stl', '.3mf')\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n\n        success = converter.convert(file_path, output_path, **kwargs)\n        status = \"\u2705\" if success else \"\u274c\"\n        print(f\"{status} {os.path.basename(file_path)}\")\n\n# Example: Process only \"part_*.stl\" files\nprocess_filtered_directory(\n    input_dir=\"designs/\",\n    output_dir=\"output/\",\n    pattern=\"part_*.stl\"\n)\n</code></pre>"},{"location":"user-guide/batch-processing/#production-workflows","title":"Production workflows","text":""},{"location":"user-guide/batch-processing/#manufacturing-batch","title":"Manufacturing batch","text":"<pre><code>from noah123d import STLConverter\nfrom concurrent.futures import ThreadPoolExecutor\nimport time\n\ndef production_batch(stl_files, copies_per_part=12, grid_cols=3):\n    \"\"\"Create production batches with grids\"\"\"\n\n    converter = STLConverter(include_metadata=True, validate=True)\n\n    def process_part(stl_path):\n        start_time = time.time()\n\n        # Generate output path\n        base_name = os.path.splitext(os.path.basename(stl_path))[0]\n        output_path = f\"production/{base_name}_batch_{copies_per_part}.3mf\"\n\n        # Create grid\n        success = converter.convert_with_copies(\n            stl_path=stl_path,\n            output_path=output_path,\n            count=copies_per_part,\n            grid_cols=grid_cols,\n            spacing_factor=1.15,\n            center_grid=True\n        )\n\n        processing_time = time.time() - start_time\n\n        # Get statistics\n        stats = converter.get_conversion_stats() if success else None\n\n        return {\n            'stl_path': stl_path,\n            'output_path': output_path,\n            'success': success,\n            'processing_time': processing_time,\n            'stats': stats\n        }\n\n    # Process in parallel\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        results = list(executor.map(process_part, stl_files))\n\n    # Generate summary\n    successful = [r for r in results if r['success']]\n    total_time = sum(r['processing_time'] for r in results)\n    total_objects = sum(r['stats']['copies'] for r in successful if r['stats'])\n\n    print(f\"\\n\ud83d\udcca Production Batch Summary:\")\n    print(f\"   Processed: {len(successful)}/{len(stl_files)} files\")\n    print(f\"   Total Objects: {total_objects:,}\")\n    print(f\"   Total Time: {total_time:.1f}s\")\n    print(f\"   Average Time per File: {total_time/len(stl_files):.1f}s\")\n\n    return results\n\n# Example usage\nstl_files = [\"part1.stl\", \"part2.stl\", \"part3.stl\"]\nresults = production_batch(stl_files, copies_per_part=16, grid_cols=4)\n</code></pre>"},{"location":"user-guide/batch-processing/#quality-control-batch","title":"Quality control batch","text":"<pre><code>def quality_control_batch(stl_files, test_counts=[1, 4, 9]):\n    \"\"\"Create multiple test grids for quality control\"\"\"\n\n    converter = STLConverter(include_metadata=True, validate=True)\n\n    for stl_path in stl_files:\n        base_name = os.path.splitext(os.path.basename(stl_path))[0]\n\n        print(f\"\\n\ud83d\udd0d Processing QC batch: {base_name}\")\n\n        for count in test_counts:\n            # Determine grid layout\n            if count == 1:\n                grid_cols = 1\n                suffix = \"single\"\n            elif count == 4:\n                grid_cols = 2\n                suffix = \"2x2\"\n            elif count == 9:\n                grid_cols = 3\n                suffix = \"3x3\"\n            else:\n                grid_cols = None\n                suffix = f\"{count}x\"\n\n            output_path = f\"qc_testing/{base_name}_qc_{suffix}.3mf\"\n\n            success = converter.convert_with_copies(\n                stl_path=stl_path,\n                output_path=output_path,\n                count=count,\n                grid_cols=grid_cols,\n                spacing_factor=1.2,\n                center_grid=True\n            )\n\n            status = \"\u2705\" if success else \"\u274c\"\n            print(f\"   {status} {suffix}: {count} copies\")\n\n# Example usage\nstl_files = [\"prototype_v1.stl\", \"prototype_v2.stl\"]\nquality_control_batch(stl_files)\n</code></pre>"},{"location":"user-guide/batch-processing/#progress-tracking","title":"Progress tracking","text":""},{"location":"user-guide/batch-processing/#progress-bar-integration","title":"Progress bar integration","text":"<pre><code>from tqdm import tqdm\nimport time\n\ndef batch_with_progress(stl_files, **kwargs):\n    \"\"\"Batch processing with progress bar\"\"\"\n\n    converter = STLConverter(include_metadata=True)\n    results = []\n\n    # Create progress bar\n    with tqdm(total=len(stl_files), desc=\"Converting STL files\") as pbar:\n        for stl_path in stl_files:\n            # Update progress bar description\n            filename = os.path.basename(stl_path)\n            pbar.set_description(f\"Converting {filename}\")\n\n            # Convert file\n            output_path = stl_path.replace('.stl', '.3mf')\n            success = converter.convert(stl_path, output_path, **kwargs)\n\n            results.append({\n                'input': stl_path,\n                'output': output_path,\n                'success': success\n            })\n\n            # Update progress\n            pbar.update(1)\n            time.sleep(0.1)  # Brief pause for visual feedback\n\n    return results\n\n# Example usage\nstl_files = [\"part1.stl\", \"part2.stl\", \"part3.stl\"]\nresults = batch_with_progress(stl_files)\n</code></pre>"},{"location":"user-guide/batch-processing/#real-time-statistics","title":"Real-time statistics","text":"<pre><code>def batch_with_stats(stl_files, **kwargs):\n    \"\"\"Batch processing with real-time statistics\"\"\"\n\n    converter = STLConverter(include_metadata=True, validate=True)\n\n    start_time = time.time()\n    total_triangles = 0\n    total_objects = 0\n    successful_conversions = 0\n\n    print(\"\ud83d\ude80 Starting batch conversion...\")\n    print(f\"Files to process: {len(stl_files)}\")\n    print(\"-\" * 50)\n\n    for i, stl_path in enumerate(stl_files, 1):\n        file_start = time.time()\n        filename = os.path.basename(stl_path)\n\n        # Convert file\n        output_path = stl_path.replace('.stl', '.3mf')\n        success = converter.convert(stl_path, output_path, **kwargs)\n\n        file_time = time.time() - file_start\n\n        if success:\n            successful_conversions += 1\n            stats = converter.get_conversion_stats()\n            total_triangles += stats.get('triangles', 0)\n            total_objects += stats.get('copies', 1)\n\n            print(f\"\u2705 {i}/{len(stl_files)} {filename:&lt;25} \"\n                  f\"{stats.get('triangles', 0):&gt;8,} tri \"\n                  f\"{file_time:&gt;6.1f}s\")\n        else:\n            print(f\"\u274c {i}/{len(stl_files)} {filename:&lt;25} \"\n                  f\"{'FAILED':&lt;8} \"\n                  f\"{file_time:&gt;6.1f}s\")\n\n        # Show running statistics\n        elapsed = time.time() - start_time\n        rate = total_triangles / elapsed if elapsed &gt; 0 else 0\n\n        if i % 5 == 0 or i == len(stl_files):  # Every 5 files or at end\n            print(f\"\ud83d\udcca Progress: {successful_conversions}/{i} successful, \"\n                  f\"{total_triangles:,} triangles, \"\n                  f\"{rate:,.0f} tri/s\")\n            print(\"-\" * 50)\n\n    # Final summary\n    total_time = time.time() - start_time\n    print(f\"\\n\ud83c\udfaf Batch Complete!\")\n    print(f\"   Successful: {successful_conversions}/{len(stl_files)}\")\n    print(f\"   Total Objects: {total_objects:,}\")\n    print(f\"   Total Triangles: {total_triangles:,}\")\n    print(f\"   Total Time: {total_time:.1f}s\")\n    print(f\"   Average Rate: {total_triangles/total_time:,.0f} triangles/sec\")\n\n# Example usage\nbatch_with_stats([\"model1.stl\", \"model2.stl\", \"model3.stl\"])\n</code></pre>"},{"location":"user-guide/batch-processing/#error-handling","title":"Error handling","text":""},{"location":"user-guide/batch-processing/#robust-batch-processing","title":"Robust batch processing","text":"<pre><code>import logging\nfrom datetime import datetime\n\ndef robust_batch_processing(stl_files, **kwargs):\n    \"\"\"Batch processing with comprehensive error handling\"\"\"\n\n    # Setup logging\n    log_filename = f\"batch_conversion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log\"\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler(log_filename),\n            logging.StreamHandler()\n        ]\n    )\n\n    converter = STLConverter(include_metadata=True, validate=True)\n    results = {\n        'successful': [],\n        'failed': [],\n        'errors': []\n    }\n\n    for i, stl_path in enumerate(stl_files, 1):\n        try:\n            filename = os.path.basename(stl_path)\n            logging.info(f\"Processing {i}/{len(stl_files)}: {filename}\")\n\n            # Check if input file exists\n            if not os.path.exists(stl_path):\n                raise FileNotFoundError(f\"Input file not found: {stl_path}\")\n\n            # Generate output path\n            output_path = stl_path.replace('.stl', '.3mf')\n\n            # Ensure output directory exists\n            os.makedirs(os.path.dirname(output_path), exist_ok=True)\n\n            # Convert file\n            success = converter.convert(stl_path, output_path, **kwargs)\n\n            if success:\n                results['successful'].append({\n                    'input': stl_path,\n                    'output': output_path,\n                    'stats': converter.get_conversion_stats()\n                })\n                logging.info(f\"\u2705 Successfully converted: {filename}\")\n            else:\n                results['failed'].append(stl_path)\n                logging.warning(f\"\u274c Conversion failed: {filename}\")\n\n        except Exception as e:\n            error_msg = f\"Error processing {stl_path}: {str(e)}\"\n            results['errors'].append({\n                'file': stl_path,\n                'error': str(e)\n            })\n            logging.error(error_msg)\n\n            # Continue with next file\n            continue\n\n    # Summary\n    logging.info(f\"\\n\ud83d\udcca Batch Processing Summary:\")\n    logging.info(f\"   Successful: {len(results['successful'])}\")\n    logging.info(f\"   Failed: {len(results['failed'])}\")\n    logging.info(f\"   Errors: {len(results['errors'])}\")\n    logging.info(f\"   Log file: {log_filename}\")\n\n    return results\n\n# Example usage\nstl_files = [\"good_file.stl\", \"missing_file.stl\", \"corrupt_file.stl\"]\nresults = robust_batch_processing(stl_files)\n</code></pre>"},{"location":"user-guide/batch-processing/#performance-optimization","title":"Performance optimization","text":""},{"location":"user-guide/batch-processing/#parallel-processing","title":"Parallel processing","text":"<pre><code>from concurrent.futures import ThreadPoolExecutor, as_completed\nimport multiprocessing\n\ndef parallel_batch_processing(stl_files, max_workers=None, **kwargs):\n    \"\"\"High-performance parallel batch processing\"\"\"\n\n    if max_workers is None:\n        max_workers = min(multiprocessing.cpu_count(), len(stl_files))\n\n    print(f\"\ud83d\ude80 Starting parallel processing with {max_workers} workers\")\n\n    def process_single_file(stl_path):\n        \"\"\"Process a single file\"\"\"\n        converter = STLConverter(include_metadata=True, validate=True)\n\n        try:\n            output_path = stl_path.replace('.stl', '.3mf')\n            success = converter.convert(stl_path, output_path, **kwargs)\n\n            return {\n                'input': stl_path,\n                'output': output_path,\n                'success': success,\n                'stats': converter.get_conversion_stats() if success else None,\n                'error': None\n            }\n        except Exception as e:\n            return {\n                'input': stl_path,\n                'output': None,\n                'success': False,\n                'stats': None,\n                'error': str(e)\n            }\n\n    # Process files in parallel\n    results = []\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        # Submit all tasks\n        future_to_file = {\n            executor.submit(process_single_file, stl_path): stl_path \n            for stl_path in stl_files\n        }\n\n        # Collect results as they complete\n        for future in as_completed(future_to_file):\n            stl_path = future_to_file[future]\n            try:\n                result = future.result()\n                results.append(result)\n\n                # Progress feedback\n                status = \"\u2705\" if result['success'] else \"\u274c\"\n                filename = os.path.basename(stl_path)\n                print(f\"{status} {len(results)}/{len(stl_files)} {filename}\")\n\n            except Exception as exc:\n                print(f\"\u274c {stl_path} generated an exception: {exc}\")\n\n    # Summary\n    successful = sum(1 for r in results if r['success'])\n    print(f\"\\n\ud83d\udcca Parallel Processing Complete:\")\n    print(f\"   Successful: {successful}/{len(stl_files)}\")\n    print(f\"   Workers used: {max_workers}\")\n\n    return results\n\n# Example usage\nstl_files = [f\"part_{i}.stl\" for i in range(10)]\nresults = parallel_batch_processing(stl_files, max_workers=4)\n</code></pre>"},{"location":"user-guide/batch-processing/#configuration-management","title":"Configuration management","text":""},{"location":"user-guide/batch-processing/#batch-configuration-files","title":"Batch configuration files","text":"<pre><code>import json\nimport yaml\n\ndef load_batch_config(config_path):\n    \"\"\"Load batch processing configuration from file\"\"\"\n\n    with open(config_path, 'r') as f:\n        if config_path.endswith('.json'):\n            config = json.load(f)\n        elif config_path.endswith('.yaml') or config_path.endswith('.yml'):\n            config = yaml.safe_load(f)\n        else:\n            raise ValueError(\"Config file must be JSON or YAML\")\n\n    return config\n\ndef process_from_config(config_path):\n    \"\"\"Process batch based on configuration file\"\"\"\n\n    config = load_batch_config(config_path)\n\n    # Extract settings\n    input_dir = config['input_directory']\n    output_dir = config['output_directory']\n    conversion_settings = config.get('conversion_settings', {})\n    grid_settings = config.get('grid_settings', {})\n    processing_settings = config.get('processing_settings', {})\n\n    # Find input files\n    pattern = config.get('file_pattern', '*.stl')\n    stl_files = []\n    for root, dirs, files in os.walk(input_dir):\n        for file in files:\n            if fnmatch.fnmatch(file.lower(), pattern.lower()):\n                stl_files.append(os.path.join(root, file))\n\n    print(f\"Found {len(stl_files)} files to process\")\n\n    # Process files\n    if grid_settings.get('enabled', False):\n        # Grid processing\n        results = []\n        for stl_path in stl_files:\n            output_path = stl_path.replace(input_dir, output_dir).replace('.stl', '.3mf')\n\n            success = stl_to_3mf_grid(\n                stl_path=stl_path,\n                output_path=output_path,\n                count=grid_settings.get('count', 4),\n                grid_cols=grid_settings.get('grid_cols'),\n                spacing_factor=grid_settings.get('spacing_factor', 1.2),\n                center_grid=grid_settings.get('center_grid', True)\n            )\n\n            results.append({'input': stl_path, 'output': output_path, 'success': success})\n    else:\n        # Standard conversion\n        results = batch_convert_stl_to_3mf(\n            input_dir=input_dir,\n            output_dir=output_dir,\n            max_workers=processing_settings.get('max_workers', 4),\n            **conversion_settings\n        )\n\n    return results\n\n# Example config file (batch_config.yaml):\n\"\"\"\ninput_directory: \"models/stl_files\"\noutput_directory: \"models/3mf_files\"\nfile_pattern: \"*.stl\"\n\nconversion_settings:\n  include_metadata: true\n  validate: true\n\ngrid_settings:\n  enabled: true\n  count: 4\n  grid_cols: 2\n  spacing_factor: 1.2\n  center_grid: true\n\nprocessing_settings:\n  max_workers: 4\n\"\"\"\n\n# Usage\nresults = process_from_config(\"batch_config.yaml\")\n</code></pre>"},{"location":"user-guide/batch-processing/#next-steps","title":"Next steps","text":"<ul> <li>Grid Layouts - Create optimized grid arrangements</li> <li>3MF Analysis - Analyze your converted files</li> <li>API Reference - Detailed API documentation</li> </ul>"},{"location":"user-guide/grid-layouts/","title":"Grid layouts","text":"<p>Grid layouts are Noah123d's flagship feature, allowing you to create optimized arrangements of multiple copies for 3D printing and manufacturing workflows.</p>"},{"location":"user-guide/grid-layouts/#overview","title":"Overview","text":"<p>The grid layout system automatically:</p> <ol> <li>Calculates object dimensions: Analyzes STL bounding box</li> <li>Determines grid layout: Optimal rows\u00d7columns for given count  </li> <li>Computes spacing: Based on object size and spacing factor</li> <li>Positions objects: Places copies without overlapping</li> <li>Centers grid: Optional centering around origin</li> </ol>"},{"location":"user-guide/grid-layouts/#core-functions","title":"Core functions","text":""},{"location":"user-guide/grid-layouts/#stl_to_3mf_grid","title":"<code>stl_to_3mf_grid()</code>","text":"<p>Simple function for creating grid layouts:</p> <pre><code>from noah123d import stl_to_3mf_grid\n\nsuccess = stl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\",\n    count=4,                    # Total number of copies\n    grid_cols=2,               # Number of columns (optional)\n    spacing_factor=1.2,        # Spacing multiplier\n    center_grid=True           # Center at origin\n)\n</code></pre>"},{"location":"user-guide/grid-layouts/#stlconverterconvert_with_copies","title":"<code>STLConverter.convert_with_copies()</code>","text":"<p>Advanced method with detailed control:</p> <pre><code>from noah123d import STLConverter\n\nconverter = STLConverter(include_metadata=True, validate=True)\nsuccess = converter.convert_with_copies(\n    stl_path=\"part.stl\",\n    output_path=\"grid.3mf\",\n    count=9,\n    grid_cols=3,\n    spacing_factor=1.1,\n    center_grid=True\n)\n\n# Get conversion statistics\nif success:\n    stats = converter.get_conversion_stats()\n    print(f\"Created {stats['copies']} objects\")\n    print(f\"Grid layout: {stats['grid_layout']}\")\n</code></pre>"},{"location":"user-guide/grid-layouts/#parameters","title":"Parameters","text":""},{"location":"user-guide/grid-layouts/#core-parameters","title":"Core parameters","text":"Parameter Type Default Description <code>count</code> <code>int</code> Required Total number of copies to create <code>grid_cols</code> <code>int</code> <code>None</code> Number of columns (auto-calculated if None) <code>spacing_factor</code> <code>float</code> <code>1.1</code> Spacing multiplier (1.0 = touching) <code>center_grid</code> <code>bool</code> <code>True</code> Center the grid around origin"},{"location":"user-guide/grid-layouts/#spacing-factor-guide","title":"Spacing factor guide","text":"Factor Spacing Use Case <code>1.0</code> 0% (touching) Maximum density, parts touching <code>1.1</code> 10% gap Recommended minimum for 3D printing <code>1.2</code> 20% gap Good for most applications <code>1.5</code> 50% gap Wide spacing for large parts <code>2.0</code> 100% gap Maximum spacing, double width"},{"location":"user-guide/grid-layouts/#grid-layout-logic","title":"Grid layout logic","text":""},{"location":"user-guide/grid-layouts/#automatic-layout-calculation","title":"Automatic layout calculation","text":"<p>When <code>grid_cols</code> is not specified, Noah123d calculates the optimal layout:</p> <pre><code>import math\n\ndef calculate_optimal_layout(count):\n    cols = math.ceil(math.sqrt(count))\n    rows = math.ceil(count / cols)\n    return (rows, cols)\n\n# Examples:\n# 4 objects \u2192 2\u00d72 grid\n# 6 objects \u2192 3\u00d72 grid  \n# 9 objects \u2192 3\u00d73 grid\n# 12 objects \u2192 4\u00d73 grid\n</code></pre>"},{"location":"user-guide/grid-layouts/#grid-position-calculation","title":"Grid position calculation","text":"<p>Objects are positioned using:</p> <pre><code>def calculate_position(row, col, spacing_x, spacing_y, center_grid):\n    x = col * spacing_x\n    y = row * spacing_y\n\n    if center_grid:\n        # Offset to center the grid\n        grid_width = (cols - 1) * spacing_x\n        grid_height = (rows - 1) * spacing_y\n        x -= grid_width / 2\n        y -= grid_height / 2\n\n    return (x, y, 0)  # Z always 0\n</code></pre>"},{"location":"user-guide/grid-layouts/#examples","title":"Examples","text":""},{"location":"user-guide/grid-layouts/#basic-grid-patterns","title":"Basic grid patterns","text":"2\u00d72 Grid3\u00d73 GridSingle RowAuto Layout <pre><code>from noah123d import stl_to_3mf_grid\n\n# Create 4 copies in 2\u00d72 arrangement\nstl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid_2x2.3mf\",\n    count=4,\n    grid_cols=2,\n    spacing_factor=1.2\n)\n</code></pre> <pre><code># Create 9 copies in 3\u00d73 arrangement\nstl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"grid_3x3.3mf\",\n    count=9,\n    grid_cols=3,\n    spacing_factor=1.1\n)\n</code></pre> <pre><code># Create 5 copies in single row\nstl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"row_5x1.3mf\",\n    count=5,\n    grid_cols=5,\n    spacing_factor=1.5\n)\n</code></pre> <pre><code># Let system choose optimal layout\nstl_to_3mf_grid(\n    stl_path=\"part.stl\",\n    output_path=\"auto_grid.3mf\",\n    count=6,  # Will create 3\u00d72 grid\n    spacing_factor=1.1\n)\n</code></pre>"},{"location":"user-guide/grid-layouts/#advanced-configurations","title":"Advanced configurations","text":""},{"location":"user-guide/grid-layouts/#production-grid","title":"Production grid","text":"<pre><code>from noah123d import STLConverter\n\nconverter = STLConverter(\n    include_metadata=True,\n    validate=True\n)\n\n# Large production grid\nsuccess = converter.convert_with_copies(\n    stl_path=\"production_part.stl\",\n    output_path=\"production_batch.3mf\",\n    count=24,\n    grid_cols=6,  # 6\u00d74 grid\n    spacing_factor=1.15,\n    center_grid=True\n)\n\nif success:\n    stats = converter.get_conversion_stats()\n    print(f\"\ud83d\udcca Production Grid Statistics:\")\n    print(f\"   Objects: {stats['copies']}\")\n    print(f\"   Layout: {stats['grid_layout'][1]}\u00d7{stats['grid_layout'][0]}\")\n    print(f\"   Triangles: {stats['triangles']:,}\")\n    print(f\"   Time: {stats['conversion_time']:.2f}s\")\n</code></pre>"},{"location":"user-guide/grid-layouts/#tight-packing","title":"Tight packing","text":"<pre><code># Minimal spacing for maximum density\nstl_to_3mf_grid(\n    stl_path=\"small_part.stl\",\n    output_path=\"tight_pack.3mf\",\n    count=16,\n    grid_cols=4,\n    spacing_factor=1.05,  # Just 5% spacing\n    center_grid=True\n)\n</code></pre>"},{"location":"user-guide/grid-layouts/#wide-spacing","title":"Wide spacing","text":"<pre><code># Wide spacing for large parts or assembly\nstl_to_3mf_grid(\n    stl_path=\"large_part.stl\",\n    output_path=\"wide_spacing.3mf\",\n    count=4,\n    grid_cols=2,\n    spacing_factor=2.0,  # 100% spacing\n    center_grid=True\n)\n</code></pre>"},{"location":"user-guide/grid-layouts/#performance","title":"Performance","text":""},{"location":"user-guide/grid-layouts/#grid-generation-performance","title":"Grid generation performance","text":"<p>Noah123d's grid system is highly optimized:</p> <ul> <li>Geometry Reuse: Original mesh data is reused for all copies</li> <li>Memory Efficient: Only transformation data stored per copy</li> <li>Fast Positioning: Vectorized position calculations</li> <li>Parallel Processing: Multi-threaded where possible</li> </ul>"},{"location":"user-guide/grid-layouts/#benchmark-results","title":"Benchmark results","text":"<p>Based on <code>tile_2x2_borde.stl</code> (33,448 triangles):</p> Grid Size Objects Triangles File Size Time Rate 2\u00d72 4 133,792 2.6 MB 3.6s 37K tri/s 3\u00d73 9 301,032 5.9 MB 7.2s 42K tri/s 4\u00d73 12 401,376 7.8 MB 3.1s 129K tri/s 5\u00d74 20 668,960 13.1 MB 8.4s 80K tri/s"},{"location":"user-guide/grid-layouts/#output-analysis","title":"Output analysis","text":""},{"location":"user-guide/grid-layouts/#grid-metadata","title":"Grid metadata","text":"<p>Generated 3MF files include comprehensive metadata:</p> <pre><code>from noah123d import analyze_3mf\n\nanalysis = analyze_3mf(\"grid_2x2.3mf\")\nmetadata = analysis.get('metadata', {})\n\nprint(f\"Grid Layout: {metadata.get('grid_layout')}\")\nprint(f\"Spacing Factor: {metadata.get('spacing_factor')}\")\nprint(f\"Objects: {analysis['summary']['object_count']}\")\nprint(f\"Total Dimensions: {analysis['summary']['overall_dimensions']}\")\n</code></pre>"},{"location":"user-guide/grid-layouts/#position-verification","title":"Position verification","text":"<p>Verify object positions are correct:</p> <pre><code>analysis = analyze_3mf(\"grid_2x2.3mf\")\n\nprint(\"Object Positions:\")\nfor i, model in enumerate(analysis['models']):\n    center = model['center_of_mass']\n    print(f\"  Object {i+1}: ({center[0]:.1f}, {center[1]:.1f}, {center[2]:.1f})\")\n\n# Calculate spacing between adjacent objects\nif len(analysis['models']) &gt;= 2:\n    pos1 = analysis['models'][0]['center_of_mass']\n    pos2 = analysis['models'][1]['center_of_mass']\n    spacing_x = abs(pos2[0] - pos1[0])\n    print(f\"X-axis spacing: {spacing_x:.1f} mm\")\n</code></pre>"},{"location":"user-guide/grid-layouts/#applications","title":"Applications","text":""},{"location":"user-guide/grid-layouts/#3d-printing","title":"3D printing","text":"<p>Perfect for 3D printing workflows:</p> <pre><code># Small parts production\nstl_to_3mf_grid(\n    stl_path=\"miniature.stl\",\n    output_path=\"mini_army.3mf\",\n    count=25,\n    grid_cols=5,\n    spacing_factor=1.1\n)\n\n# Prototype testing\nstl_to_3mf_grid(\n    stl_path=\"prototype.stl\",\n    output_path=\"test_variants.3mf\",\n    count=6,\n    grid_cols=3,\n    spacing_factor=1.5\n)\n</code></pre>"},{"location":"user-guide/grid-layouts/#manufacturing","title":"Manufacturing","text":"<p>Industrial applications:</p> <pre><code># Injection molding layout\nstl_to_3mf_grid(\n    stl_path=\"injection_part.stl\",\n    output_path=\"mold_layout.3mf\",\n    count=8,\n    grid_cols=4,\n    spacing_factor=1.3\n)\n\n# Assembly kit organization\nstl_to_3mf_grid(\n    stl_path=\"component.stl\",\n    output_path=\"assembly_kit.3mf\",\n    count=12,\n    grid_cols=3,\n    spacing_factor=1.2\n)\n</code></pre>"},{"location":"user-guide/grid-layouts/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/grid-layouts/#common-issues","title":"Common issues","text":"<p>Overlapping Objects</p> <p>If objects overlap, increase <code>spacing_factor</code>: <pre><code># Instead of 1.1, try 1.2 or higher\nspacing_factor=1.2\n</code></pre></p> <p>Grid Too Large</p> <p>For large grids, consider splitting into multiple files: <pre><code># Split 24 objects into two 3\u00d74 grids\nstl_to_3mf_grid(\"part.stl\", \"batch1.3mf\", count=12, grid_cols=3)\nstl_to_3mf_grid(\"part.stl\", \"batch2.3mf\", count=12, grid_cols=3)\n</code></pre></p> <p>Memory Usage</p> <p>For very large grids (100+ objects), monitor memory usage: <pre><code>import psutil\nprint(f\"Memory usage: {psutil.virtual_memory().percent}%\")\n</code></pre></p>"},{"location":"user-guide/grid-layouts/#validation","title":"Validation","text":"<p>Validate grid results:</p> <pre><code>from noah123d import analyze_3mf\n\ndef validate_grid(file_path, expected_count, expected_spacing):\n    analysis = analyze_3mf(file_path)\n\n    # Check object count\n    actual_count = analysis['summary']['object_count']\n    assert actual_count == expected_count, f\"Expected {expected_count}, got {actual_count}\"\n\n    # Check spacing (if multiple objects)\n    if actual_count &gt;= 2:\n        pos1 = analysis['models'][0]['center_of_mass']\n        pos2 = analysis['models'][1]['center_of_mass']\n        actual_spacing = abs(pos2[0] - pos1[0])\n        tolerance = expected_spacing * 0.01  # 1% tolerance\n        assert abs(actual_spacing - expected_spacing) &lt; tolerance\n\n    print(\"\u2705 Grid validation passed!\")\n\n# Example validation\nvalidate_grid(\"grid_2x2.3mf\", expected_count=4, expected_spacing=55.0)\n</code></pre>"},{"location":"user-guide/grid-layouts/#next-steps","title":"Next steps","text":"<ul> <li>3MF Analysis - Analyze your grids</li> <li>Batch Processing - Process multiple files</li> <li>API Reference - Detailed API docs</li> </ul>"}]}